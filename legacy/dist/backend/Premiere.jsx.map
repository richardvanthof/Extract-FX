{"mappings":"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","sources":["<anon>","src/backend/Premiere.tsx"],"sourcesContent":["(function () {\n// Enable Adobe Query Engine (QE) API\nconst $7ecdbf46a677a6e4$var$qe = app.enableQE();\nconst $7ecdbf46a677a6e4$var$updateUI = 1;\nconst $7ecdbf46a677a6e4$var$debug = false // Set to false when deploying for production.\n;\n// Define the methods\n$._PPP_ = {\n    message: function(msg) {\n        if ($7ecdbf46a677a6e4$var$debug) $.writeln(msg);\n    },\n    updateEventPanel: function(msg, type = 'info') {\n        $._PPP_.message(msg);\n        app.setSDKEventMessage(msg, type);\n    },\n    getInstalledEffects: function() {\n        const effects = $7ecdbf46a677a6e4$var$qe.project.getVideoEffectList();\n        $._PPP_.message(effects);\n        return effects;\n    },\n    searchForFileWithName: function(nameToFind) {\n        const numItemsAtRoot = app.project.rootItem.children.numItems;\n        let foundFile = null;\n        for(let i = 0; i < numItemsAtRoot && foundFile === null; i++){\n            const currentItem = app.project.rootItem.children[i];\n            if (currentItem && currentItem.name === nameToFind) foundFile = currentItem;\n        }\n        return foundFile;\n    },\n    findInsertedClip: function(track, startTime) {\n        for (const clip of track.clips){\n            if (clip.start.seconds === startTime.seconds) return clip;\n        }\n        return null;\n    },\n    importFile: function(path) {\n        try {\n            const file = path; // TODO: convert to relative path.\n            const supressUI = true; // Suppress errors\n            const importAsStills = false; // Import as image sequence\n            const targetBin = app.project.rootItem;\n            const imported = app.project.importFiles(file, supressUI, targetBin, importAsStills);\n            return imported;\n        } catch (err) {\n            return err;\n        }\n    },\n    getAdjustmentLayer: function() {\n        try {\n            const fileName = 'RSFX-container';\n            let path;\n            let importedFile;\n            let foundFile = $._PPP_.searchForFileWithName(fileName);\n            if (Folder.fs === 'Macintosh') path = '/Library/Application Support/Adobe/CEP/extensions/space.therichard.ExtractFX/payloads/payloads/adjustment-layer.prproj';\n            else path = 'file:///C:/Program%20Files%20(x86)/Common%20Files/Adobe/CEP/extensions/space.therichard.ExtractFX/payloads/adjustment-layer.prproj';\n            if (foundFile === null) {\n                $._PPP_.message('File not found. Importing...');\n                importedFile = $._PPP_.importFile(path);\n                foundFile = $._PPP_.searchForFileWithName(fileName);\n                if (foundFile === null) {\n                    $._PPP_.message('File not found. Importing...');\n                    importedFile = $._PPP_.importFile(path);\n                    foundFile = $._PPP_.searchForFileWithName(fileName);\n                    if (foundFile === null) throw \"Adjustment layer template not found. Try again or manually create a template file (see help-screen for more info).\";\n                }\n            } else $._PPP_.message('File found in the project.');\n            return foundFile;\n        } catch (err) {\n            alert(err);\n            return err;\n        }\n    },\n    sanitized: function(effect) {\n        // Replace Opacity and Motion effect with Transform FX\n        if (effect.toLowerCase() === 'motion' || effect.toLowerCase() === 'opacity') return 'Transform';\n        else if (effect.toLowerCase() === 'AE.ADBE Motion'.toLowerCase() || effect.toLowerCase() === 'AE.ADBE Opacity'.toLowerCase()) return 'AE.ADBE Geometry' // this is the MatchName (aka. internal effect ID) for the Transform FX\n        ;\n        else return effect;\n    },\n    notDuplicateFx: function(filterName, currentFxName, QEclip) {\n        if (QEclip.numComponents > 0) for(let i = 0; i < QEclip.numComponents; i++){\n            const comp = QEclip.getComponentAt(i);\n            const name = comp.name;\n            const isDuplicate = name.toLowerCase() === filterName.toLowerCase() && filterName.toLowerCase() === currentFxName.toLowerCase();\n            if (isDuplicate) return false;\n        }\n        return true;\n    },\n    findComponentByName: function(list, query, keyName = 'displayName') {\n        // Loop through component collection list and search for a specified item.\n        $._PPP_.message(`Finding match for ${query}`);\n        for (const component of list){\n            $._PPP_.message(`-- ${component[keyName]}`);\n            if (component[keyName] === query) {\n                $._PPP_.message(`-- Match found: ${component[keyName]}`);\n                return component;\n            }\n        }\n        return null;\n    },\n    listContains: function(query, filter) {\n        for (let filterItem of filter)if (filterItem.toLowerCase() === query.toLowerCase()) return true;\n        return false;\n    },\n    copySetting: function(sourceProp, targetProp, config) {\n        try {\n            let isSet = null;\n            const { sourceIn: sourceIn, targetIn: targetIn, sourceRes: sourceRes } = config;\n            const targetRes = {\n                w: app.project.activeSequence.frameSizeHorizontal,\n                h: app.project.activeSequence.frameSizeVertical // Height of the sequence\n            };\n            function translatePosCoordinates(value, currentEffectName, sourceRes, targetRes) {\n                if (currentEffectName.toLowerCase() === 'position') return [\n                    value[0] * (sourceRes.w / targetRes.w),\n                    value[1] * (sourceRes.h / targetRes.h)\n                ];\n                return value; // Non-position properties remain unchanged\n            }\n            if (targetProp.displayName.toLowerCase() === 'position') $._PPP_.message(`orginele transform pos: ${targetProp.getValue()}`); //DEBUG\n            // Check if the property supports keyframes\n            if (targetProp.areKeyframesSupported() && sourceProp.getKeys()) {\n                const keyframes = sourceProp.getKeys();\n                $._PPP_.message('Setting keyframes...');\n                targetProp.setTimeVarying(true); // Enable keyframes\n                // Set each keyframe value by converting it to absolute coordinates\n                for (let keyframeTime of keyframes){\n                    const keyframeValue = sourceProp.getValueAtKey(keyframeTime);\n                    // Adjust the keyframe time for the target clip\n                    const adjustedKeyframeTime = new Time();\n                    adjustedKeyframeTime.seconds = keyframeTime.seconds - sourceIn.seconds + targetIn.seconds;\n                    const adjustedKeyframeValue = translatePosCoordinates(keyframeValue, sourceProp.displayName, sourceRes, targetRes);\n                    // Add keyframe to the target and set the converted value\n                    targetProp.addKey(adjustedKeyframeTime);\n                    targetProp.setValueAtKey(adjustedKeyframeTime, adjustedKeyframeValue, $7ecdbf46a677a6e4$var$updateUI);\n                    $._PPP_.message(`---- Time: ${adjustedKeyframeTime.seconds} sec; Value: ${keyframeValue}`);\n                }\n            } else {\n                // Handle the case for static values (no keyframes)\n                $._PPP_.message('Setting static value...');\n                const staticValue = sourceProp.getValue();\n                const adjustedValue = translatePosCoordinates(staticValue, sourceProp.displayName, sourceRes, targetRes);\n                if (targetProp && staticValue) isSet = targetProp.setValue(adjustedValue, $7ecdbf46a677a6e4$var$updateUI);\n                $._PPP_.message(`---- Value: ${staticValue}`);\n            }\n            return isSet;\n        } catch (err) {\n            $._PPP_.message('ERROR copySetting(): ' + err);\n            return null;\n        }\n    },\n    copySettings: function(sourceEffect, targetClip, config) {\n        try {\n            const sourceFxName = $._PPP_.sanitized(sourceEffect.matchName);\n            // Find correct effect regardless of order\n            $._PPP_.message(`Finding targetEffect for sourceEffect '${sourceFxName}' (${sourceEffect.matchName})`);\n            const targetComponent = $._PPP_.findComponentByName(targetClip.components, $._PPP_.sanitized(sourceEffect.matchName), 'matchName');\n            if (targetComponent) // Loop through Properties (aka. effect settings)\n            for (const sourceProp of sourceEffect.properties){\n                if (sourceProp.displayName.length <= 1) continue;\n                $._PPP_.message(`\\n- Copying setting '${sourceProp.displayName}' for effect ${$._PPP_.sanitized(sourceEffect.matchName)}`);\n                if (sourceProp.displayName.toLowerCase() === 'scale' && // Check if we're reading the scale setting from source\n                targetComponent.matchName === \"AE.ADBE Geometry\" // Check if this setting is for the Transform effect.\n                ) {\n                    // Copy scale property twice from Motion to 'scale width' and 'scale height' in Transform-effect.\n                    // BUG: this condition makes everything go out of sync for some reason.\n                    const scaleProps = [\n                        'Scale Width',\n                        'Scale Height'\n                    ];\n                    for (let scaleProp of scaleProps){\n                        const targetProp = $._PPP_.findComponentByName(targetComponent.properties, scaleProp);\n                        if (targetProp) $._PPP_.copySetting(sourceProp, targetProp, config);\n                    }\n                    continue;\n                } else if (// Skip Opacity setting in Transform effect\n                targetComponent.matchName === \"AE.ADBE Geometry\" && sourceProp.displayName.toLowerCase() === 'opacity') continue;\n                else {\n                    // If not: continue normally\n                    const targetProp = $._PPP_.findComponentByName(targetComponent.properties, sourceProp.displayName);\n                    if (targetProp) $._PPP_.copySetting(sourceProp, targetProp, config);\n                    continue;\n                }\n            }\n            else throw `Component (aka. effect) ${sourceEffect.displayName} as ${$._PPP_.sanitized(sourceEffect.displayName)} not found.`;\n            return true;\n        } catch (err) {\n            alert(err);\n            $._PPP_.message('ERROR copySettings(): ' + err);\n        }\n    },\n    getClipResolution: function(clip) {\n        // Get the associated project item\n        var projectItem = clip.projectItem;\n        // Get the project columns metadata\n        var columnsMetadata = projectItem.getProjectColumnsMetadata();\n        // Check if we have the metadata and print it out\n        if (columnsMetadata.length > 0) {\n            // You might need to inspect the keys for your specific version\n            var videoInfo = columnsMetadata[0]['premierePrivateProjectMetaData:Column.Intrinsic.VideoInfo'];\n            if (videoInfo) {\n                // Extract the width and height from the videoInfo string\n                var resolutionParts = videoInfo.split(\" x \");\n                var width = resolutionParts[0];\n                var height = resolutionParts[1].split(\" \")[0]; // Extract only the height, ignoring any extra info\n                // Output the width and height\n                $.writeln(\"Clip width: \" + width);\n                $.writeln(\"Clip height: \" + height);\n                return {\n                    w: width,\n                    h: height\n                };\n            } else $.writeln(\"Video info not found in metadata.\");\n        } else $.writeln(\"No columns metadata available.\");\n    },\n    getEffects: function(clip) {\n        var effects = {};\n        for (let effect of clip.components){\n            // GET EFFECT NAME\n            var effectName = effect.displayName;\n            var fxContainer = effects[effectName] = {};\n            // GET SETTING NAMES\n            for (let setting of effect.properties){\n                // Get FX setting name\n                var settingName = setting.displayName;\n                fxContainer[settingName] = {};\n                // GET SETTING VALUE (keyframes or static)\n                if (setting.areKeyframesSupported() && setting.getKeys()) {\n                    // Get Keyframes\n                    var keyFrames = [];\n                    for (let keyTime of setting.getKeys()){\n                        var keyValue = setting.getValueAtKey(keyTime);\n                        keyFrames.push([\n                            keyTime,\n                            keyValue\n                        ]);\n                    }\n                    fxContainer[settingName].keyframes = keyFrames;\n                } else {\n                    // Get static value (if keyframes are not available);\n                    var value = setting.getValue();\n                    fxContainer[settingName].value = value;\n                }\n            }\n        }\n        return effects;\n    },\n    getSep: function() {\n        if (Folder.fs === 'Macintosh') return '/';\n        else return '\\\\';\n    },\n    saveEffectstoFile: function(track = 1, userExclusions = []) {\n        try {\n            const sequence = app.project.activeSequence;\n            let sessionCounter = 1;\n            const originalPath = app.project.path;\n            const seqName = sequence.name;\n            // Get the active sequence\n            if (!sequence) {\n                alert('No active sequence found.');\n                return false;\n            }\n            const effectsList = [];\n            // Define which video track to look for clips and where to put adjustment layers\n            const sourceTrackIndex = track - 1; // The track from which to copy effects\n            const sourceTrack = sequence.videoTracks[sourceTrackIndex];\n            if (!sourceTrack) throw 'Please ensure the sourcetracks exist.';\n            for (let clip of sourceTrack.clips){\n                const clipEffects = $._PPP_.getEffects(clip);\n                effectsList.push(clipEffects);\n                $._PPP_.message(clipEffects);\n            }\n            const outputFile = {\n                type: 'RS-FX-EXCHANGE',\n                track: track,\n                sequence: seqName,\n                exclusions: userExclusions,\n                clips: effectsList\n            };\n            // Convert JSON object to string\n            var jsonString = JSON.stringify(outputFile);\n            // Open a Save Dialog\n            var file = File.saveDialog(\"Save effects list\"); // Open dialog to save file with .json extension\n            if (file) {\n                if (file.name.split('.').pop().toLowerCase() !== 'json') file = new File(file.fullName + \".json\");\n                // If the user chooses a file\n                if (file.open(\"w\")) {\n                    file.write(jsonString); // Write the JSON string to the selected file\n                    file.close(); // Close the file to save changes\n                } else alert(\"Failed to open the file for writing.\");\n            } else alert(\"No file selected.\");\n            return true;\n        } catch (err) {\n            throw err;\n        }\n    },\n    copyClipEffectsToAdjustmentLayers: function(track, userExclusions = []) {\n        const saveType = 'file';\n        try {\n            if (!track) throw \"Source track undefined.\";\n            $._PPP_.updateEventPanel(`Track ${track} - Initializing effect extraction...`, 'info');\n            // Helper function to find a video track by index\n            function findVideoTrack(index) {\n                const videoTrack = app.project.activeSequence.videoTracks[index];\n                return videoTrack ? videoTrack : null;\n            }\n            // Get the active sequence\n            const sequence = app.project.activeSequence;\n            if (!sequence) {\n                alert('No active sequence found.');\n                return false;\n            }\n            // Define which video track to look for clips and where to put adjustment layers\n            const sourceTrackIndex = track || 1; // The track from which to copy effects\n            const targetTrackIndex = sourceTrackIndex + 1; // The track where the adjustment layers will be placed\n            // Regular ExtendScript API\n            const sourceTrack = findVideoTrack(sourceTrackIndex - 1);\n            const targetTrack = findVideoTrack(targetTrackIndex - 1);\n            // Adobe Query Engine (QE) API\n            const qeTargetTrack = $7ecdbf46a677a6e4$var$qe.project.getActiveSequence().getVideoTrackAt(targetTrackIndex - 1);\n            if (!sourceTrack || !targetTrack) throw 'Please ensure the source and target tracks exist.';\n            if (sourceTrack.clips.numItems <= 0) throw \"No clips on source track were found.\";\n            // Import adjustment layer\n            const adjustmentLayer = $._PPP_.getAdjustmentLayer();\n            // Iterate over each clip in the source track\n            for(let c = 0; c < sourceTrack.clips.numItems; c++){\n                const sourceClip = sourceTrack.clips[c]; // Current clip\n                const clipEffects = sourceClip.components; // Current clip effects\n                const startTime = sourceClip.start; // Start time of clip\n                // Status update\n                $._PPP_.updateEventPanel(`\\n\\nMoving effects from clip ${c} of ${sourceTrack.clips.numItems}.`, 'info');\n                // CHECK IF CLIP EVEN HAS EFFECTS\n                if (clipEffects.numItems > 0) {\n                    // Create an adjustment layer in the target track\n                    const inserted = targetTrack.insertClip(adjustmentLayer, startTime); // Returns true if inserted correctly\n                    const targetClip = targetTrack.clips[c]; // Current target clip (aka. adjustmente layer)\n                    const sourceRes = {\n                        w: sequence.frameSizeHorizontal,\n                        h: sequence.frameSizeVertical\n                    };\n                    let config = {\n                        sourceIn: sourceClip.inPoint,\n                        targetIn: targetClip.inPoint,\n                        sourceRes: sourceRes\n                    };\n                    if (inserted) {\n                        // Create link to newly created adjustment layer with QE API\n                        const adjustmentLyrQE = qeTargetTrack.getItemAt(c + 1); // Did +1 since QE starts counting from 1 instead of 0.\n                        const adjustmentLayer = $._PPP_.findInsertedClip(targetTrack, startTime);\n                        // Match the duration of the adjustment layer to the clip\n                        adjustmentLayer.end = sourceClip.end;\n                        // COPY ALL EFFECTS TO ADJUSTMENT LAYER\n                        // Loop over each effect in the source clip\n                        for(let ce = 0; ce < clipEffects.numItems; ce++){\n                            const effect = clipEffects[ce]; // Current effect\n                            // SKIP EXCLUDED EFFECTS\n                            let exclusions = [\n                                'Opacity',\n                                ...userExclusions\n                            ] // exclusions.\n                            ;\n                            $._PPP_.message(`Exlusions list: ${exclusions}`);\n                            const skipEffect = $._PPP_.listContains(effect.displayName, exclusions);\n                            if (skipEffect === false) {\n                                const effectName = $._PPP_.sanitized(effect.displayName); // Current (corrected) effect name\n                                const newEffect = $7ecdbf46a677a6e4$var$qe.project.getVideoEffectByName(effectName); // Fetch effect property\n                                let effectAdded;\n                                // Check if no duplicate Transform effect is added\n                                if ($._PPP_.notDuplicateFx('Transform', effectName, adjustmentLyrQE)) effectAdded = adjustmentLyrQE.addVideoEffect(newEffect); // Add effect to adjustment layer\n                                else {\n                                    $._PPP_.message('- Skipped duplicate effect.');\n                                    effectAdded = false;\n                                }\n                                // Check if effect was added correctly\n                                if (effectAdded) {\n                                    // Loop over each effect\n                                    const settingsAdded = $._PPP_.copySettings(effect, targetClip, config);\n                                    if (!settingsAdded) $._PPP_.message('- Error occurred while adding effect settings.');\n                                }\n                            } else $._PPP_.message(`Skipped: ${effect.displayName}`);\n                        }\n                    }\n                }\n            }\n            $._PPP_.updateEventPanel('Finished copying effects', 'info');\n        } catch (err) {\n            $._PPP_.updateEventPanel(err, 'error');\n            alert(err);\n            return err;\n        }\n        return true;\n    },\n    restoreEffectsToClips: function(options) {\n        //Get track\n        try {\n            const params = JSON.parse(options);\n            const { sourceData: sourceData, exclusions: exclusions } = params;\n            if (!sourceData) throw 'Source data not found. JSON is undefined or malformed.';\n            // Helper function to find a video track by index\n            function findVideoTrack(index) {\n                const videoTrack = app.project.activeSequence.videoTracks[index];\n                return videoTrack ? videoTrack : null;\n            }\n            //Get variables\n            const sequence = app.project.activeSequence;\n            if (!sequence) {\n                alert('No active sequence found.');\n                return false;\n            }\n            // Define which video track to look for clips and where to put adjustment layers\n            const targetTrackIndex = params.targetTrack - 1; // The track where the adjustment layers will be placed\n            // Target track vars\n            const targetTrack = findVideoTrack(targetTrackIndex);\n            const qeTargetTrack = $7ecdbf46a677a6e4$var$qe.project.getActiveSequence().getVideoTrackAt(targetTrackIndex); //QE starts counting from 1.\n            if (!targetTrack) throw 'Target track undefined.';\n            if (!targetTrack.clips) throw 'Target track has no clips';\n            const sourceClips = sourceData.clips;\n            const targetClips = targetTrack.clips;\n            //Loop through clips\n            for(let c = 0; c < sourceClips.length && c <= targetClips.numItems; c++){\n                $._PPP_.updateEventPanel(`Restoring efffect for clip ${c} of ${sourceClips.length}`);\n                const indexQE = c + 1;\n                const sourceClip = sourceClips[c];\n                const targetClip = targetClips[c];\n                const targetClipQE = qeTargetTrack.getItemAt(indexQE); // Did +1 since QE starts counting from 1 instead of 0.\n                if (!targetClip) throw 'Target clip not found.';\n                if (!targetClipQE) throw 'QE target clip not found.';\n                // Loop through clip effects \n                for(let effectName in sourceClip){\n                    // SKIP EXCLUDED EFFECTS\n                    $._PPP_.message(`Exlusions list: ${exclusions}`);\n                    const skipEffect = $._PPP_.listContains(effectName, exclusions);\n                    if (skipEffect === false) {\n                        //Loop through effect settings\n                        // Skip duplicate effects.\n                        if (effectName.toLowerCase() !== 'motion' && effectName.toLowerCase() !== 'opacity') {\n                            // Add video effect\n                            const newEffect = $7ecdbf46a677a6e4$var$qe.project.getVideoEffectByName(effectName); // Fetch effect property\n                            targetClipQE.addVideoEffect(newEffect);\n                        }\n                        // Vars\n                        const sourceEffect = sourceClip[effectName];\n                        const targetEffect = $._PPP_.findComponentByName(targetClip.components, effectName);\n                        for(let settingName in sourceEffect){\n                            const sourceSetting = sourceEffect[settingName];\n                            const targetSetting = $._PPP_.findComponentByName(targetEffect.properties, settingName);\n                            //Add effect to targetclip\n                            if (sourceSetting && targetSetting) {\n                                if (sourceSetting.keyframes) {\n                                    targetSetting.setTimeVarying(true); // Enable keyframes\n                                    const { keyframes: keyframes } = sourceSetting;\n                                    for (let [keyTime, keyValue] of keyframes){\n                                        targetSetting.addKey(keyTime.seconds);\n                                        targetSetting.setValueAtKey(keyTime.seconds, keyValue, $7ecdbf46a677a6e4$var$updateUI);\n                                    }\n                                } else targetSetting.setValue(sourceSetting.value, $7ecdbf46a677a6e4$var$updateUI);\n                            } else throw 'Target or source setting required but not found.';\n                        }\n                    }\n                }\n            }\n            $._PPP_.updateEventPanel('Finishing task...');\n            return true;\n        } catch (err) {\n            alert(err, err.name, err.message);\n            $._PPP_.message(err);\n            return err;\n        }\n    }\n}; // CALL FUNCTIONS DIRECTLY (ONLY FOR DEBUGGING VIA 'LAUNCH SCRIPT IN EXTENDSCROPT')\n // Uncomment function and start debugger to test.\n // Output all installed Effects\n // $._PPP_.message($._PPP_.getInstalledEffects())\n // Start copying effects to adjustment layers from track 1 (we're counting from 1)\n // const excl = ['Lumetri Color', 'Warp Stabilizer'];\n // const data = '';\n // $._PPP_.copyClipEffectsToAdjustmentLayers(1, []);\n // const data = {\n //   \"type\": \"RS-FX-EXCHANGE\",\n //   \"track\": 1,\n //   \"sequence\": \"My video\",\n //   \"exclusions\": [],\n //   \"clips\": [\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 152\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"keyframes\": [\n //                       [\n //                           {\n //                               \"seconds\": 21.1592955,\n //                               \"ticks\": \"5374799605728\"\n //                           },\n //                           [\n //                               0.5,\n //                               0.5\n //                           ]\n //                       ],\n //                       [\n //                           {\n //                               \"seconds\": 27.683712,\n //                               \"ticks\": \"7032105787392\"\n //                           },\n //                           [\n //                               0.54560631513596,\n //                               0.46042093634605\n //                           ]\n //                       ]\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"keyframes\": [\n //                       [\n //                           {\n //                               \"seconds\": 21.1592955,\n //                               \"ticks\": \"5374799605728\"\n //                           },\n //                           109\n //                       ],\n //                       [\n //                           {\n //                               \"seconds\": 27.683712,\n //                               \"ticks\": \"7032105787392\"\n //                           },\n //                           124.3671875\n //                       ]\n //                   ]\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 2\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"keyframes\": [\n //                       [\n //                           {\n //                               \"seconds\": 3599.819769,\n //                               \"ticks\": \"914411818442304\"\n //                           },\n //                           100\n //                       ],\n //                       [\n //                           {\n //                               \"seconds\": 3608.759301,\n //                               \"ticks\": \"916682602602816\"\n //                           },\n //                           120\n //                       ]\n //                   ]\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"keyframes\": [\n //                       [\n //                           {\n //                               \"seconds\": 3598.4860485,\n //                               \"ticks\": \"914073032095776\"\n //                           },\n //                           110\n //                       ],\n //                       [\n //                           {\n //                               \"seconds\": 3605.2627905,\n //                               \"ticks\": \"915794432991648\"\n //                           },\n //                           100\n //                       ]\n //                   ]\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           }\n //       },\n //       {\n //           \"Opacity\": {\n //               \"Opacity\": {\n //                   \"value\": 100\n //               },\n //               \"Blend Mode\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Motion\": {\n //               \"Position\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Scale\": {\n //                   \"value\": 100\n //               },\n //               \"Scale Width\": {\n //                   \"value\": 100\n //               },\n //               \"Uniform Scale\": {\n //                   \"value\": true\n //               },\n //               \"Rotation\": {\n //                   \"value\": 0\n //               },\n //               \"Anchor Point\": {\n //                   \"value\": [\n //                       0.5,\n //                       0.5\n //                   ]\n //               },\n //               \"Anti-flicker Filter\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Left\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Top\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Right\": {\n //                   \"value\": 0\n //               },\n //               \"Crop Bottom\": {\n //                   \"value\": 0\n //               }\n //           },\n //           \"Mosaic\": {\n //               \"Horizontal Blocks\": {\n //                   \"keyframes\": [\n //                       [\n //                           {\n //                               \"seconds\": 10.4644668333333,\n //                               \"ticks\": \"2658142007136\"\n //                           },\n //                           600\n //                       ],\n //                       [\n //                           {\n //                               \"seconds\": 10.4978335,\n //                               \"ticks\": \"2666617674336\"\n //                           },\n //                           200\n //                       ],\n //                       [\n //                           {\n //                               \"seconds\": 11.4988334999961,\n //                               \"ticks\": \"2920887690335\"\n //                           },\n //                           1\n //                       ]\n //                   ]\n //               },\n //               \"Vertical Blocks\": {\n //                   \"keyframes\": [\n //                       [\n //                           {\n //                               \"seconds\": 10.4644668333333,\n //                               \"ticks\": \"2658142007136\"\n //                           },\n //                           600\n //                       ],\n //                       [\n //                           {\n //                               \"seconds\": 10.4978335,\n //                               \"ticks\": \"2666617674336\"\n //                           },\n //                           200\n //                       ],\n //                       [\n //                           {\n //                               \"seconds\": 11.4988334999961,\n //                               \"ticks\": \"2920887690335\"\n //                           },\n //                           1\n //                       ]\n //                   ]\n //               },\n //               \"Sharp Colors\": {\n //                   \"value\": true\n //               }\n //           }\n //       }\n //   ]\n // }\n // const options = JSON.stringify({\n //   exclusions: [],\n //   sourceData: data,\n //   targetTrack: 1\n // })\n // $._PPP_.restoreEffectsToClips(options)\n //$._PPP_.saveEffectstoFile(1);\n\n})();\n//# sourceMappingURL=Premiere.js.map\n","// Enable Adobe Query Engine (QE) API\nconst qe = app.enableQE();\nconst updateUI = 1;\nconst debug = false // Set to false when deploying for production.\n\n// Custom namespace to avoid conflicts with other libraries\n// namespace $ {\n//   export let _PPP_: {\n//     message: (msg: string) => void;\n//     updateEventPanel: (msg: string, type: 'info' | 'warning' | 'error') => void;\n//     searchForFileWithName: (nameToFind: string) => ProjectItem | null;\n//     findInsertedClip: (track: Track, startTime: Time) => TrackItem | null;\n//     importFile: (path: string) => void;\n//     getAdjustmentLayer: () => ProjectItem;\n//     sanitized: (effect: string) => string;\n//     notDuplicateFx: (filterName: string, currentFxName: string, QEclip: any) => boolean;\n//     findComponentByName: (list: ComponentCollection, query: string, keyName?: string) => Component | null;\n//     copySettings: (sourceEffect: Component, targetClip: TrackItem) => boolean;\n//     copyClipEffectsToAdjustmentLayers: (track: number) => boolean;\n//   };\n// }\n\ntype fxObj = {\n\tname: string,\n\tmatchName: string\n}\n\ntype Resolution = {\n  w: number,\n  h: number\n}\n\ntype CopySettingsConfig = {\n  sourceIn: Time,\n  targetIn: Time,\n  sourceRes: Resolution\n}\n\n\n\n// Define the methods\n$._PPP_ = {\n  message: function (msg: string): void {\n    if(debug) {$.writeln(msg)};\n  },\n\n  updateEventPanel: function (msg: string, type: 'info' | 'warning' | 'error' = 'info'): void {\n    $._PPP_.message(msg);\n    app.setSDKEventMessage(msg, type);\n  },\n\n\tgetInstalledEffects: function():string[] {\n\t\tconst effects =  qe.project.getVideoEffectList();\n\t\t$._PPP_.message(effects);\n\t\treturn effects\n\t},\n\n  searchForFileWithName: function (nameToFind: string): ProjectItem | null {\n    const numItemsAtRoot = app.project.rootItem.children.numItems;\n    let foundFile: ProjectItem | null = null;\n\n    for (let i = 0; i < numItemsAtRoot && foundFile === null; i++) {\n      const currentItem = app.project.rootItem.children[i];\n      if (currentItem && currentItem.name === nameToFind) {\n        foundFile = currentItem;\n      }\n    }\n    return foundFile;\n  },\n\n  findInsertedClip: function (track: Track, startTime: Time): TrackItem | null {\n    for (const clip of track.clips) {\n      if (clip.start.seconds === startTime.seconds) {\n        return clip;\n      }\n    }\n    return null;\n  },\n\n  importFile: function (path: string): boolean {\n    try {\n      const file = path; // TODO: convert to relative path.\n      const supressUI = true; // Suppress errors\n      const importAsStills = false; // Import as image sequence\n      const targetBin = app.project.rootItem;\n      const imported = app.project.importFiles(file, supressUI, targetBin, importAsStills);\n      return imported;\n    }catch(err){\n      return err\n    }\n    \n  },\n\n  getAdjustmentLayer: function (): ProjectItem {\n    try {\n      const fileName = 'RSFX-container';\n      let path: string;\n      let importedFile;\n      let foundFile = $._PPP_.searchForFileWithName(fileName);\n      \n      if (Folder.fs === 'Macintosh') {\n        path = '/Library/Application Support/Adobe/CEP/extensions/space.therichard.ExtractFX/payloads/payloads/adjustment-layer.prproj';\n      } else {\n        path = 'file:///C:/Program%20Files%20(x86)/Common%20Files/Adobe/CEP/extensions/space.therichard.ExtractFX/payloads/adjustment-layer.prproj';\n      }\n\n      if (foundFile === null) {\n        $._PPP_.message('File not found. Importing...');\n        importedFile = $._PPP_.importFile(path);\n        foundFile = $._PPP_.searchForFileWithName(fileName);\n        if(foundFile === null) {\n          $._PPP_.message('File not found. Importing...');\n          importedFile = $._PPP_.importFile(path);\n          foundFile = $._PPP_.searchForFileWithName(fileName);\n          if(foundFile === null) { throw \"Adjustment layer template not found. Try again or manually create a template file (see help-screen for more info).\"}\n        }\n      } else {\n        $._PPP_.message('File found in the project.');\n      }\n      return foundFile;\n    } catch (err) {\n      alert(err);\n      return err;\n    }\n    \n  },\n\n  sanitized: function (effect: string): string {\n    // Replace Opacity and Motion effect with Transform FX\n    if (\n\t\t\teffect.toLowerCase() === 'motion' || \n\t\t\teffect.toLowerCase() === 'opacity'\n\t\t) {\n      return 'Transform';\n    } else if(\n\t\t\teffect.toLowerCase() === 'AE.ADBE Motion'.toLowerCase() || \n\t\t\teffect.toLowerCase() === 'AE.ADBE Opacity'.toLowerCase()\n\t\t) {\n\t\t\treturn 'AE.ADBE Geometry' // this is the MatchName (aka. internal effect ID) for the Transform FX\n\t\t} else {\n      return effect;\n    }\n  },\n\n  notDuplicateFx: function (filterName: string, currentFxName: string, QEclip: QEClip): boolean {\n    if (QEclip.numComponents > 0) {\n      for (let i = 0; i < QEclip.numComponents; i++) {\n        const comp = QEclip.getComponentAt(i);\n        const name = comp.name;\n        const isDuplicate =\n          name.toLowerCase() === filterName.toLowerCase() &&\n          filterName.toLowerCase() === currentFxName.toLowerCase();\n        if (isDuplicate) {\n          return false;\n        }\n      }\n    }\n    return true;\n  },\n\n  findComponentByName: function (list: ComponentCollection, query: string, keyName: string = 'displayName'): Component | null {\n    // Loop through component collection list and search for a specified item.\n    $._PPP_.message(`Finding match for ${query}`)\n    for (const component of list) {\n\t\t\t$._PPP_.message(`-- ${component[keyName]}`)\n      if (component[keyName] === query) {\n\t\t\t\t$._PPP_.message(`-- Match found: ${component[keyName]}`);\n        return component;\n      }\n    }\n    return null;\n  },\n  listContains: function(query: string, filter: string[]):boolean {\n    for(let filterItem of filter) if(filterItem.toLowerCase() === query.toLowerCase()) {return true}\n    return false;\n  },\n\n  copySetting: function(sourceProp: ComponentParam, targetProp: ComponentParam, config: CopySettingsConfig): 0 | null {\n    try {\n      let isSet = null;\n      const { sourceIn, targetIn, sourceRes } = config;\n  \n      const targetRes:Resolution = {\n        w: app.project.activeSequence.frameSizeHorizontal, // Width of the sequence,\n        h: app.project.activeSequence.frameSizeVertical // Height of the sequence\n      }\n  \n      function translatePosCoordinates(\n        value: any, \n        currentEffectName: string, \n        sourceRes: Resolution, \n        targetRes: Resolution\n      ) {\n        if (currentEffectName.toLowerCase() === 'position') {\n          return [value[0] * (sourceRes.w / targetRes.w), value[1] * (sourceRes.h / targetRes.h)];\n        }\n        return value; // Non-position properties remain unchanged\n      }\n\n      if (targetProp.displayName.toLowerCase() === 'position') {\n        $._PPP_.message(`orginele transform pos: ${targetProp.getValue()}`); //DEBUG\n      }\n     \n  \n      // Check if the property supports keyframes\n      if (targetProp.areKeyframesSupported() && sourceProp.getKeys()) {\n        const keyframes = sourceProp.getKeys();\n        $._PPP_.message('Setting keyframes...');\n  \n        targetProp.setTimeVarying(true); // Enable keyframes\n  \n        // Set each keyframe value by converting it to absolute coordinates\n        for (let keyframeTime of keyframes) {\n          const keyframeValue = sourceProp.getValueAtKey(keyframeTime);\n  7\n          // Adjust the keyframe time for the target clip\n          const adjustedKeyframeTime = new Time();\n          adjustedKeyframeTime.seconds = keyframeTime.seconds - sourceIn.seconds + targetIn.seconds;\n\n          const adjustedKeyframeValue = translatePosCoordinates(\n            keyframeValue, \n            sourceProp.displayName, \n            sourceRes,\n            targetRes\n          );\n\n          // Add keyframe to the target and set the converted value\n          targetProp.addKey(adjustedKeyframeTime);\n          targetProp.setValueAtKey(adjustedKeyframeTime, adjustedKeyframeValue, updateUI);\n  \n          $._PPP_.message(`---- Time: ${adjustedKeyframeTime.seconds} sec; Value: ${keyframeValue}`);\n        }\n      } else {\n        // Handle the case for static values (no keyframes)\n        $._PPP_.message('Setting static value...');\n        const staticValue = sourceProp.getValue();\n\n        const adjustedValue = translatePosCoordinates(\n          staticValue, \n          sourceProp.displayName, \n          sourceRes,\n          targetRes\n        );\n\n        if (targetProp && staticValue) {\n          isSet = targetProp.setValue(adjustedValue, updateUI);\n        }\n        $._PPP_.message(`---- Value: ${staticValue}`);\n      }\n  \n      return isSet;\n    } catch (err) {\n      $._PPP_.message('ERROR copySetting(): ' + err);\n      return null;\n    }\n  },\n\n  copySettings: function (sourceEffect: Component, targetClip: TrackItem, config: CopySettingsConfig ): boolean {\n    try {\n      const sourceFxName = $._PPP_.sanitized(sourceEffect.matchName)\n      // Find correct effect regardless of order\n\t\t\t$._PPP_.message(`Finding targetEffect for sourceEffect '${sourceFxName}' (${sourceEffect.matchName})`);\n\n      const targetComponent = $._PPP_.findComponentByName(\n\t\t\t\ttargetClip.components,\n\t\t\t\t$._PPP_.sanitized(sourceEffect.matchName), \n\t\t\t\t'matchName'\n\t\t\t);\n\n      if (targetComponent) {\n\n        // Loop through Properties (aka. effect settings)\n        for (const sourceProp of sourceEffect.properties) {\n\t\t\t\t\tif(sourceProp.displayName.length <= 1) {continue; }; // skip effect setting if it has no name.\n\t\t\t\t\t$._PPP_.message(`\\n- Copying setting '${sourceProp.displayName}' for effect ${$._PPP_.sanitized(sourceEffect.matchName)}`);\n          \n          if(\n            sourceProp.displayName.toLowerCase() === 'scale' &&  // Check if we're reading the scale setting from source\n            targetComponent.matchName === \"AE.ADBE Geometry\" // Check if this setting is for the Transform effect.\n          ) {\n            // Copy scale property twice from Motion to 'scale width' and 'scale height' in Transform-effect.\n            // BUG: this condition makes everything go out of sync for some reason.\n            const scaleProps:string[] = ['Scale Width', 'Scale Height']\n            for(let scaleProp of scaleProps) {\n              const targetProp = $._PPP_.findComponentByName(targetComponent.properties, scaleProp);\n              if(targetProp){$._PPP_.copySetting(sourceProp, targetProp, config)}\n            }\n            continue;\n          } else if (\n            // Skip Opacity setting in Transform effect\n            targetComponent.matchName === \"AE.ADBE Geometry\" &&\n            sourceProp.displayName.toLowerCase() === 'opacity'\n          ) {\n            continue;\n          } else {\n            // If not: continue normally\n            const targetProp = $._PPP_.findComponentByName(targetComponent.properties, sourceProp.displayName);\n            if(targetProp) {$._PPP_.copySetting(sourceProp, targetProp, config)}\n            continue;\n          }\n        }\n      } else {\n        throw `Component (aka. effect) ${sourceEffect.displayName} as ${$._PPP_.sanitized(sourceEffect.displayName)} not found.`;\n      }\n\n      return true;\n    } catch (err) {\n      alert(err)\n      $._PPP_.message('ERROR copySettings(): ' + err);\n    }\n  },\n  \n  getClipResolution: function(clip:TrackItem):Resolution {\n    // Get the associated project item\n    var projectItem = clip.projectItem;\n\n    // Get the project columns metadata\n    var columnsMetadata = projectItem.getProjectColumnsMetadata();\n\n    // Check if we have the metadata and print it out\n    if (columnsMetadata.length > 0) {\n        // You might need to inspect the keys for your specific version\n        var videoInfo = columnsMetadata[0]['premierePrivateProjectMetaData:Column.Intrinsic.VideoInfo'];\n\n        if (videoInfo) {\n            // Extract the width and height from the videoInfo string\n            var resolutionParts = videoInfo.split(\" x \");\n            var width = resolutionParts[0];\n            var height = resolutionParts[1].split(\" \")[0];  // Extract only the height, ignoring any extra info\n\n            // Output the width and height\n            $.writeln(\"Clip width: \" + width);\n            $.writeln(\"Clip height: \" + height);\n            \n            return {\n              w: width,\n              h: height\n            }\n        } else {\n            $.writeln(\"Video info not found in metadata.\");\n        }\n    } else {\n        $.writeln(\"No columns metadata available.\");\n    }\n  },\n\n  getEffects: function(clip: TrackItem) {\n    var effects = {};\n    for (let effect of clip.components) {\n        \n        // GET EFFECT NAME\n        var effectName = effect.displayName;\n        var fxContainer = effects[effectName]= {};\n        \n        // GET SETTING NAMES\n        for (let setting of effect.properties){\n\n            // Get FX setting name\n            var settingName = setting.displayName;\n            fxContainer[settingName] = {};\n            \n            // GET SETTING VALUE (keyframes or static)\n            if (\n                setting.areKeyframesSupported() && \n                setting.getKeys()\n                ){\n                \n                // Get Keyframes\n                var keyFrames = [];\n\n                for (let keyTime of setting.getKeys()) {\n                    var keyValue = setting.getValueAtKey(keyTime);\n                    keyFrames.push([keyTime, keyValue])\n                };\n                fxContainer[settingName].keyframes = keyFrames;\n\n            } else {\n                // Get static value (if keyframes are not available);\n                var value = setting.getValue();\n                fxContainer[settingName].value = value;\n            }\n        }\n    }\n    return effects;\n  },\n\n  getSep : function () {\n\t\tif (Folder.fs === 'Macintosh') {\n\t\t\treturn '/';\n\t\t} else {\n\t\t\treturn '\\\\';\n\t\t}\n\t},\n\n  saveEffectstoFile: function(track: number = 1, userExclusions: string[] = []): boolean {\n    \n    try {\n      const sequence = app.project.activeSequence;\n      let sessionCounter\t= 1;\n      const originalPath\t= app.project.path;\n      const seqName = sequence.name\n      // Get the active sequence\n      \n      if (!sequence) {\n        alert('No active sequence found.');\n        return false;\n      }\n\n      const effectsList = [];\n\n      // Define which video track to look for clips and where to put adjustment layers\n      const sourceTrackIndex = track - 1; // The track from which to copy effects\n      const sourceTrack: Track = sequence.videoTracks[sourceTrackIndex]\n\n      if (!sourceTrack) {\n        throw 'Please ensure the sourcetracks exist.';\n      }\n\n      for(let clip of sourceTrack.clips) {\n        const clipEffects = $._PPP_.getEffects(clip)\n        effectsList.push(clipEffects)\n        $._PPP_.message(clipEffects)\n      }\n\n      const outputFile = {\n        type: 'RS-FX-EXCHANGE',\n        track: track,\n        sequence: seqName,\n        exclusions: userExclusions,\n        clips: effectsList\n      }\n\n      // Convert JSON object to string\n      var jsonString = JSON.stringify(outputFile);\n\n      // Open a Save Dialog\n      var file = File.saveDialog(\"Save effects list\"); // Open dialog to save file with .json extension\n\n      if (file) {\n          if (file.name.split('.').pop().toLowerCase() !== 'json') {\n            file = new File(file.fullName + \".json\");\n        }\n\n        // If the user chooses a file\n        if (file.open(\"w\")) {\n            file.write(jsonString); // Write the JSON string to the selected file\n            file.close();           // Close the file to save changes\n        } else {\n            alert(\"Failed to open the file for writing.\");\n        }\n      } else {\n          alert(\"No file selected.\");\n      }\n\n      return true;\n    } catch(err) {\n      throw err;\n      alert(err);\n    }\n   \n  },\n\n  copyClipEffectsToAdjustmentLayers: function (track: number, userExclusions: string[] = []): boolean {\n    \n    const saveType: 'file' | 'layer' = 'file';\n\n    try {\n      if(!track) {throw \"Source track undefined.\"}\n      $._PPP_.updateEventPanel(`Track ${track} - Initializing effect extraction...`, 'info');\n\n      // Helper function to find a video track by index\n      function findVideoTrack(index: number): Track | null {\n        const videoTrack = app.project.activeSequence.videoTracks[index];\n        return videoTrack ? videoTrack : null;\n      }\n\n      // Get the active sequence\n      const sequence = app.project.activeSequence;\n      if (!sequence) {\n        alert('No active sequence found.');\n        return false;\n      }\n\n      // Define which video track to look for clips and where to put adjustment layers\n      const sourceTrackIndex = track || 1; // The track from which to copy effects\n      const targetTrackIndex = sourceTrackIndex + 1; // The track where the adjustment layers will be placed\n\n      // Regular ExtendScript API\n      const sourceTrack: Track = findVideoTrack(sourceTrackIndex - 1)!;\n      const targetTrack: Track = findVideoTrack(targetTrackIndex - 1)!;\n\n      // Adobe Query Engine (QE) API\n      const qeTargetTrack = qe.project.getActiveSequence().getVideoTrackAt(targetTrackIndex - 1);\n\n      if (!sourceTrack || !targetTrack) {\n        throw 'Please ensure the source and target tracks exist.';\n      }\n\n      if(sourceTrack.clips.numItems <= 0) { throw \"No clips on source track were found.\"}\n\n      // Import adjustment layer\n      const adjustmentLayer = $._PPP_.getAdjustmentLayer();\n\n      // Iterate over each clip in the source track\n      for (let c = 0; c < sourceTrack.clips.numItems; c++) {\n        const sourceClip: TrackItem = sourceTrack.clips[c]; // Current clip\n        \n        const clipEffects: ComponentCollection = sourceClip.components; // Current clip effects\n        const startTime: Time = sourceClip.start; // Start time of clip\n\n        // Status update\n        $._PPP_.updateEventPanel(`\\n\\nMoving effects from clip ${c} of ${sourceTrack.clips.numItems}.`, 'info');\n\n        // CHECK IF CLIP EVEN HAS EFFECTS\n        if (clipEffects.numItems > 0) {\n          \n        // Create an adjustment layer in the target track\n        const inserted: boolean = targetTrack.insertClip(adjustmentLayer, startTime); // Returns true if inserted correctly\n        const targetClip: TrackItem = targetTrack.clips[c]; // Current target clip (aka. adjustmente layer)\n        \n        const sourceRes:Resolution = {w: sequence.frameSizeHorizontal, h:sequence.frameSizeVertical }\n\n        let config:CopySettingsConfig = { // Get the source clip inPoint on the timeline\n          sourceIn: sourceClip.inPoint,\n          targetIn: targetClip.inPoint,\n          sourceRes: sourceRes\n        }\n         \n          if (inserted) {\n            // Create link to newly created adjustment layer with QE API\n            const adjustmentLyrQE = qeTargetTrack.getItemAt(c + 1); // Did +1 since QE starts counting from 1 instead of 0.\n            const adjustmentLayer = $._PPP_.findInsertedClip(targetTrack, startTime);\n\n            // Match the duration of the adjustment layer to the clip\n            adjustmentLayer.end = sourceClip.end;\n\n            // COPY ALL EFFECTS TO ADJUSTMENT LAYER\n            // Loop over each effect in the source clip\n            for (let ce = 0; ce < clipEffects.numItems; ce++) {\n              const effect = clipEffects[ce]; // Current effect\n              \n              // SKIP EXCLUDED EFFECTS\n              let exclusions:string[] = ['Opacity', ...userExclusions] // exclusions.\n              $._PPP_.message(`Exlusions list: ${exclusions}`)\n              const skipEffect:boolean = $._PPP_.listContains(effect.displayName, exclusions);\n              if(skipEffect === false) {\n\n                const effectName = $._PPP_.sanitized(effect.displayName); // Current (corrected) effect name\n                const newEffect = qe.project.getVideoEffectByName(effectName); // Fetch effect property\n\n\n                let effectAdded;\n\n                // Check if no duplicate Transform effect is added\n                if ($._PPP_.notDuplicateFx('Transform', effectName, adjustmentLyrQE)) {\n                  effectAdded = adjustmentLyrQE.addVideoEffect(newEffect); // Add effect to adjustment layer\n                } else {\n                  $._PPP_.message('- Skipped duplicate effect.');\n                  effectAdded = false;\n                }\n\n                // Check if effect was added correctly\n                if (effectAdded) {\n                  // Loop over each effect\n                  const settingsAdded = $._PPP_.copySettings(effect, targetClip, config);\n\n                  if (!settingsAdded) {\n                    $._PPP_.message('- Error occurred while adding effect settings.');\n                  }\n                }\n              } else {\n                $._PPP_.message(`Skipped: ${effect.displayName}`)\n              }\n            }\n          }\n        }\n      }\n\n      $._PPP_.updateEventPanel('Finished copying effects', 'info');\n      \n    } catch (err) {\n      $._PPP_.updateEventPanel(err, 'error');\n      alert(err);\n      return err;\n    }\n\t\treturn true;\n  },\n  restoreEffectsToClips: function(options:string) {\n    \n    //Get track\n    try {\n      const params = JSON.parse(options)\n      const {sourceData, exclusions}:{sourceData: Object, exclusions: string[], targetTrack: number} = params;\n      if(!sourceData) {throw 'Source data not found. JSON is undefined or malformed.'}\n       // Helper function to find a video track by index\n       function findVideoTrack(index: number): Track | null {\n        const videoTrack = app.project.activeSequence.videoTracks[index];\n        return videoTrack ? videoTrack : null;\n      }\n\n\n      //Get variables\n      const sequence = app.project.activeSequence;\n      if (!sequence) {\n        alert('No active sequence found.');\n        return false;\n      }\n\n      // Define which video track to look for clips and where to put adjustment layers\n      const targetTrackIndex = params.targetTrack - 1; // The track where the adjustment layers will be placed\n\n      // Target track vars\n      const targetTrack: Track = findVideoTrack(targetTrackIndex)!;\n      const qeTargetTrack = qe.project.getActiveSequence().getVideoTrackAt(targetTrackIndex); //QE starts counting from 1.\n\n      if(!targetTrack) { throw 'Target track undefined.'}\n      if(!targetTrack.clips) {throw 'Target track has no clips'};\n\n      const sourceClips = sourceData.clips;\n      const targetClips = targetTrack.clips;\n\n      //Loop through clips\n      for(let c = 0; c < sourceClips.length && c <= targetClips.numItems; c++) {\n        $._PPP_.updateEventPanel(`Restoring efffect for clip ${c} of ${sourceClips.length}`);\n        const indexQE = c + 1;\n        const sourceClip = sourceClips[c];\n        const targetClip = targetClips[c];\n        const targetClipQE = qeTargetTrack.getItemAt(indexQE); // Did +1 since QE starts counting from 1 instead of 0.\n        \n        if(!targetClip) {throw 'Target clip not found.'};\n        if(!targetClipQE) {throw 'QE target clip not found.'};\n\n        // Loop through clip effects \n        for(let effectName in sourceClip) {\n          \n          // SKIP EXCLUDED EFFECTS\n          $._PPP_.message(`Exlusions list: ${exclusions}`)\n          const skipEffect:boolean = $._PPP_.listContains(effectName, exclusions);\n          \n          if (skipEffect === false) {\n            //Loop through effect settings\n\n            // Skip duplicate effects.\n            if(\n              effectName.toLowerCase() !== 'motion' && \n              effectName.toLowerCase() !== 'opacity'\n            ) {\n              // Add video effect\n              const newEffect = qe.project.getVideoEffectByName(effectName); // Fetch effect property\n              targetClipQE.addVideoEffect(newEffect);\n            }\n            \n\n            // Vars\n            const sourceEffect = sourceClip[effectName];\n            const targetEffect = $._PPP_.findComponentByName(targetClip.components, effectName);\n\n            for(let settingName in sourceEffect) {\n              const sourceSetting = sourceEffect[settingName];\n              const targetSetting = $._PPP_.findComponentByName(targetEffect.properties, settingName)\n              //Add effect to targetclip\n              if(sourceSetting && targetSetting) {\n                if(sourceSetting.keyframes) {\n                  targetSetting.setTimeVarying(true); // Enable keyframes\n  \n                  const {keyframes} = sourceSetting\n                  for(let [keyTime, keyValue] of keyframes) {\n                    targetSetting.addKey(keyTime.seconds);\n                    targetSetting.setValueAtKey(keyTime.seconds, keyValue, updateUI);\n                  }\n                } else {\n                  targetSetting.setValue(sourceSetting.value, updateUI)\n                }\n              } else {\n                throw 'Target or source setting required but not found.'\n              }\n            }\n          }\n          \n        }\n      }\n      $._PPP_.updateEventPanel('Finishing task...');\n      return true;\n    } catch(err) {\n      alert(err, err.name, err.message);\n      $._PPP_.message(err)\n      return err;\n    }\n  }\n\n};\n\n\n// CALL FUNCTIONS DIRECTLY (ONLY FOR DEBUGGING VIA 'LAUNCH SCRIPT IN EXTENDSCROPT')\n// Uncomment function and start debugger to test.\n\n// Output all installed Effects\n// $._PPP_.message($._PPP_.getInstalledEffects())\n\n// Start copying effects to adjustment layers from track 1 (we're counting from 1)\n// const excl = ['Lumetri Color', 'Warp Stabilizer'];\n// const data = '';\n// $._PPP_.copyClipEffectsToAdjustmentLayers(1, []);\n\n// const data = {\n//   \"type\": \"RS-FX-EXCHANGE\",\n//   \"track\": 1,\n//   \"sequence\": \"My video\",\n//   \"exclusions\": [],\n//   \"clips\": [\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 152\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"keyframes\": [\n//                       [\n//                           {\n//                               \"seconds\": 21.1592955,\n//                               \"ticks\": \"5374799605728\"\n//                           },\n//                           [\n//                               0.5,\n//                               0.5\n//                           ]\n//                       ],\n//                       [\n//                           {\n//                               \"seconds\": 27.683712,\n//                               \"ticks\": \"7032105787392\"\n//                           },\n//                           [\n//                               0.54560631513596,\n//                               0.46042093634605\n//                           ]\n//                       ]\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"keyframes\": [\n//                       [\n//                           {\n//                               \"seconds\": 21.1592955,\n//                               \"ticks\": \"5374799605728\"\n//                           },\n//                           109\n//                       ],\n//                       [\n//                           {\n//                               \"seconds\": 27.683712,\n//                               \"ticks\": \"7032105787392\"\n//                           },\n//                           124.3671875\n//                       ]\n//                   ]\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 2\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"keyframes\": [\n//                       [\n//                           {\n//                               \"seconds\": 3599.819769,\n//                               \"ticks\": \"914411818442304\"\n//                           },\n//                           100\n//                       ],\n//                       [\n//                           {\n//                               \"seconds\": 3608.759301,\n//                               \"ticks\": \"916682602602816\"\n//                           },\n//                           120\n//                       ]\n//                   ]\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"keyframes\": [\n//                       [\n//                           {\n//                               \"seconds\": 3598.4860485,\n//                               \"ticks\": \"914073032095776\"\n//                           },\n//                           110\n//                       ],\n//                       [\n//                           {\n//                               \"seconds\": 3605.2627905,\n//                               \"ticks\": \"915794432991648\"\n//                           },\n//                           100\n//                       ]\n//                   ]\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           }\n//       },\n//       {\n//           \"Opacity\": {\n//               \"Opacity\": {\n//                   \"value\": 100\n//               },\n//               \"Blend Mode\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Motion\": {\n//               \"Position\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Scale\": {\n//                   \"value\": 100\n//               },\n//               \"Scale Width\": {\n//                   \"value\": 100\n//               },\n//               \"Uniform Scale\": {\n//                   \"value\": true\n//               },\n//               \"Rotation\": {\n//                   \"value\": 0\n//               },\n//               \"Anchor Point\": {\n//                   \"value\": [\n//                       0.5,\n//                       0.5\n//                   ]\n//               },\n//               \"Anti-flicker Filter\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Left\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Top\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Right\": {\n//                   \"value\": 0\n//               },\n//               \"Crop Bottom\": {\n//                   \"value\": 0\n//               }\n//           },\n//           \"Mosaic\": {\n//               \"Horizontal Blocks\": {\n//                   \"keyframes\": [\n//                       [\n//                           {\n//                               \"seconds\": 10.4644668333333,\n//                               \"ticks\": \"2658142007136\"\n//                           },\n//                           600\n//                       ],\n//                       [\n//                           {\n//                               \"seconds\": 10.4978335,\n//                               \"ticks\": \"2666617674336\"\n//                           },\n//                           200\n//                       ],\n//                       [\n//                           {\n//                               \"seconds\": 11.4988334999961,\n//                               \"ticks\": \"2920887690335\"\n//                           },\n//                           1\n//                       ]\n//                   ]\n//               },\n//               \"Vertical Blocks\": {\n//                   \"keyframes\": [\n//                       [\n//                           {\n//                               \"seconds\": 10.4644668333333,\n//                               \"ticks\": \"2658142007136\"\n//                           },\n//                           600\n//                       ],\n//                       [\n//                           {\n//                               \"seconds\": 10.4978335,\n//                               \"ticks\": \"2666617674336\"\n//                           },\n//                           200\n//                       ],\n//                       [\n//                           {\n//                               \"seconds\": 11.4988334999961,\n//                               \"ticks\": \"2920887690335\"\n//                           },\n//                           1\n//                       ]\n//                   ]\n//               },\n//               \"Sharp Colors\": {\n//                   \"value\": true\n//               }\n//           }\n//       }\n//   ]\n// }\n\n// const options = JSON.stringify({\n//   exclusions: [],\n//   sourceData: data,\n//   targetTrack: 1\n// })\n\n// $._PPP_.restoreEffectsToClips(options)\n\n//$._PPP_.saveEffectstoFile(1);"],"names":["$7ecdbf46a677a6e4$var$qe","app","enableQE","$","_PPP_","message","msg","updateEventPanel","type","setSDKEventMessage","getInstalledEffects","effects","project","getVideoEffectList","searchForFileWithName","nameToFind","numItemsAtRoot","rootItem","children","numItems","foundFile","i","currentItem","name","findInsertedClip","track","startTime","clip","clips","start","seconds","importFile","path","targetBin","importFiles","err","getAdjustmentLayer","fileName","Folder","fs","alert","sanitized","effect","toLowerCase","notDuplicateFx","filterName","currentFxName","QEclip","numComponents","comp","getComponentAt","findComponentByName","list","query","keyName","component","listContains","filter","filterItem","copySetting","sourceProp","targetProp","config","isSet","sourceIn","targetIn","sourceRes","targetRes","w","activeSequence","frameSizeHorizontal","h","frameSizeVertical","translatePosCoordinates","value","currentEffectName","displayName","getValue","areKeyframesSupported","getKeys","keyframes","keyframeTime","setTimeVarying","keyframeValue","getValueAtKey","adjustedKeyframeTime","Time","adjustedKeyframeValue","addKey","setValueAtKey","staticValue","adjustedValue","setValue","copySettings","sourceEffect","targetClip","sourceFxName","matchName","targetComponent","components","properties","length","scaleProp","getClipResolution","columnsMetadata","projectItem","getProjectColumnsMetadata","videoInfo","resolutionParts","split","width","height","writeln","getEffects","fxContainer","setting","settingName","keyFrames","keyTime","keyValue","push","getSep","saveEffectstoFile","userExclusions","sequence","seqName","effectsList","sourceTrack","videoTracks","clipEffects","jsonString","JSON","stringify","exclusions","file","File","saveDialog","pop","fullName","open","write","close","copyClipEffectsToAdjustmentLayers","findVideoTrack","index","videoTrack","sourceTrackIndex","targetTrackIndex","targetTrack","qeTargetTrack","getActiveSequence","getVideoTrackAt","adjustmentLayer","c","sourceClip","inserted","insertClip","inPoint","adjustmentLyrQE","getItemAt","end","ce","skipEffect","effectAdded","effectName","newEffect","getVideoEffectByName","addVideoEffect","restoreEffectsToClips","options","params","parse","sourceData","sourceClips","targetClips","indexQE","targetClipQE","targetEffect","sourceSetting","targetSetting"],"version":3,"file":"Premiere.js.map"}