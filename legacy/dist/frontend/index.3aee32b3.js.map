{"mappings":"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","sources":["<anon>","src/frontend/lib/CSInterface.ts"],"sourcesContent":["/**************************************************************************************************\n*\n* ADOBE INC.\n* Copyright 2013 Adobe Inc.\n* All Rights Reserved.\n*\n* NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the\n* terms of the Adobe license agreement accompanying it.  If you have received this file from a\n* source other than Adobe, then your use, modification, or distribution of it requires the prior\n* written permission of Adobe.\n*\n**************************************************************************************************/ /** CSInterface - v8.0.0 */ /**\n * Stores constants for the window types supported by the CSXS infrastructure.\n */ function CSXSWindowType() {}\n/** Constant for the CSXS window type Panel. */ CSXSWindowType._PANEL = \"Panel\";\n/** Constant for the CSXS window type Modeless. */ CSXSWindowType._MODELESS = \"Modeless\";\n/** Constant for the CSXS window type ModalDialog. */ CSXSWindowType._MODAL_DIALOG = \"ModalDialog\";\n/** EvalScript error message */ EvalScript_ErrMessage = \"EvalScript error.\";\n/**\n * @class Version\n * Defines a version number with major, minor, micro, and special\n * components. The major, minor and micro values are numeric; the special\n * value can be any string.\n *\n * @param major   The major version component, a positive integer up to nine digits long.\n * @param minor   The minor version component, a positive integer up to nine digits long.\n * @param micro   The micro version component, a positive integer up to nine digits long.\n * @param special The special version component, an arbitrary string.\n *\n * @return A new \\c Version object.\n */ function Version(major, minor, micro, special) {\n    this.major = major;\n    this.minor = minor;\n    this.micro = micro;\n    this.special = special;\n}\n/**\n * The maximum value allowed for a numeric version component.\n * This reflects the maximum value allowed in PlugPlug and the manifest schema.\n */ Version.MAX_NUM = 999999999;\n/**\n * @class VersionBound\n * Defines a boundary for a version range, which associates a \\c Version object\n * with a flag for whether it is an inclusive or exclusive boundary.\n *\n * @param version   The \\c #Version object.\n * @param inclusive True if this boundary is inclusive, false if it is exclusive.\n *\n * @return A new \\c VersionBound object.\n */ function VersionBound(version, inclusive) {\n    this.version = version;\n    this.inclusive = inclusive;\n}\n/**\n * @class VersionRange\n * Defines a range of versions using a lower boundary and optional upper boundary.\n *\n * @param lowerBound The \\c #VersionBound object.\n * @param upperBound The \\c #VersionBound object, or null for a range with no upper boundary.\n *\n * @return A new \\c VersionRange object.\n */ function VersionRange(lowerBound, upperBound) {\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n}\n/**\n * @class Runtime\n * Represents a runtime related to the CEP infrastructure.\n * Extensions can declare dependencies on particular\n * CEP runtime versions in the extension manifest.\n *\n * @param name    The runtime name.\n * @param version A \\c #VersionRange object that defines a range of valid versions.\n *\n * @return A new \\c Runtime object.\n */ function Runtime(name, versionRange) {\n    this.name = name;\n    this.versionRange = versionRange;\n}\n/**\n* @class Extension\n* Encapsulates a CEP-based extension to an Adobe application.\n*\n* @param id              The unique identifier of this extension.\n* @param name            The localizable display name of this extension.\n* @param mainPath        The path of the \"index.html\" file.\n* @param basePath        The base path of this extension.\n* @param windowType          The window type of the main window of this extension.\n                 Valid values are defined by \\c #CSXSWindowType.\n* @param width           The default width in pixels of the main window of this extension.\n* @param height          The default height in pixels of the main window of this extension.\n* @param minWidth        The minimum width in pixels of the main window of this extension.\n* @param minHeight       The minimum height in pixels of the main window of this extension.\n* @param maxWidth        The maximum width in pixels of the main window of this extension.\n* @param maxHeight       The maximum height in pixels of the main window of this extension.\n* @param defaultExtensionDataXml The extension data contained in the default \\c ExtensionDispatchInfo section of the extension manifest.\n* @param specialExtensionDataXml The extension data contained in the application-specific \\c ExtensionDispatchInfo section of the extension manifest.\n* @param requiredRuntimeList     An array of \\c Runtime objects for runtimes required by this extension.\n* @param isAutoVisible       True if this extension is visible on loading.\n* @param isPluginExtension   True if this extension has been deployed in the Plugins folder of the host application.\n*\n* @return A new \\c Extension object.\n*/ function Extension(id, name, mainPath, basePath, windowType, width, height, minWidth, minHeight, maxWidth, maxHeight, defaultExtensionDataXml, specialExtensionDataXml, requiredRuntimeList, isAutoVisible, isPluginExtension) {\n    this.id = id;\n    this.name = name;\n    this.mainPath = mainPath;\n    this.basePath = basePath;\n    this.windowType = windowType;\n    this.width = width;\n    this.height = height;\n    this.minWidth = minWidth;\n    this.minHeight = minHeight;\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this.defaultExtensionDataXml = defaultExtensionDataXml;\n    this.specialExtensionDataXml = specialExtensionDataXml;\n    this.requiredRuntimeList = requiredRuntimeList;\n    this.isAutoVisible = isAutoVisible;\n    this.isPluginExtension = isPluginExtension;\n}\n/**\n * @class CSEvent\n * A standard JavaScript event, the base class for CEP events.\n *\n * @param type        The name of the event type.\n * @param scope       The scope of event, can be \"GLOBAL\" or \"APPLICATION\".\n * @param appId       The unique identifier of the application that generated the event.\n * @param extensionId     The unique identifier of the extension that generated the event.\n *\n * @return A new \\c CSEvent object\n */ function CSEvent(type, scope, appId, extensionId) {\n    this.type = type;\n    this.scope = scope;\n    this.appId = appId;\n    this.extensionId = extensionId;\n}\n/** Event-specific data. */ CSEvent.prototype.data = \"\";\n/**\n * @class SystemPath\n * Stores operating-system-specific location constants for use in the\n * \\c #CSInterface.getSystemPath() method.\n * @return A new \\c SystemPath object.\n */ function SystemPath() {}\n/** The path to user data.  */ SystemPath.USER_DATA = \"userData\";\n/** The path to common files for Adobe applications.  */ SystemPath.COMMON_FILES = \"commonFiles\";\n/** The path to the user's default document folder.  */ SystemPath.MY_DOCUMENTS = \"myDocuments\";\n/** @deprecated. Use \\c #SystemPath.Extension.  */ SystemPath.APPLICATION = \"application\";\n/** The path to current extension.  */ SystemPath.EXTENSION = \"extension\";\n/** The path to hosting application's executable.  */ SystemPath.HOST_APPLICATION = \"hostApplication\";\n/**\n * @class ColorType\n * Stores color-type constants.\n */ function ColorType() {}\n/** RGB color type. */ ColorType.RGB = \"rgb\";\n/** Gradient color type. */ ColorType.GRADIENT = \"gradient\";\n/** Null color type. */ ColorType.NONE = \"none\";\n/**\n * @class RGBColor\n * Stores an RGB color with red, green, blue, and alpha values.\n * All values are in the range [0.0 to 255.0]. Invalid numeric values are\n * converted to numbers within this range.\n *\n * @param red   The red value, in the range [0.0 to 255.0].\n * @param green The green value, in the range [0.0 to 255.0].\n * @param blue  The blue value, in the range [0.0 to 255.0].\n * @param alpha The alpha (transparency) value, in the range [0.0 to 255.0].\n *      The default, 255.0, means that the color is fully opaque.\n *\n * @return A new RGBColor object.\n */ function RGBColor(red, green, blue, alpha) {\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n    this.alpha = alpha;\n}\n/**\n * @class Direction\n * A point value  in which the y component is 0 and the x component\n * is positive or negative for a right or left direction,\n * or the x component is 0 and the y component is positive or negative for\n * an up or down direction.\n *\n * @param x     The horizontal component of the point.\n * @param y     The vertical component of the point.\n *\n * @return A new \\c Direction object.\n */ function Direction(x, y) {\n    this.x = x;\n    this.y = y;\n}\n/**\n * @class GradientStop\n * Stores gradient stop information.\n *\n * @param offset   The offset of the gradient stop, in the range [0.0 to 1.0].\n * @param rgbColor The color of the gradient at this point, an \\c #RGBColor object.\n *\n * @return GradientStop object.\n */ function GradientStop(offset, rgbColor) {\n    this.offset = offset;\n    this.rgbColor = rgbColor;\n}\n/**\n * @class GradientColor\n * Stores gradient color information.\n *\n * @param type          The gradient type, must be \"linear\".\n * @param direction     A \\c #Direction object for the direction of the gradient\n                (up, down, right, or left).\n * @param numStops          The number of stops in the gradient.\n * @param gradientStopList  An array of \\c #GradientStop objects.\n *\n * @return A new \\c GradientColor object.\n */ function GradientColor(type, direction, numStops, arrGradientStop) {\n    this.type = type;\n    this.direction = direction;\n    this.numStops = numStops;\n    this.arrGradientStop = arrGradientStop;\n}\n/**\n * @class UIColor\n * Stores color information, including the type, anti-alias level, and specific color\n * values in a color object of an appropriate type.\n *\n * @param type          The color type, 1 for \"rgb\" and 2 for \"gradient\".\n                The supplied color object must correspond to this type.\n * @param antialiasLevel    The anti-alias level constant.\n * @param color         A \\c #RGBColor or \\c #GradientColor object containing specific color information.\n *\n * @return A new \\c UIColor object.\n */ function UIColor(type, antialiasLevel, color) {\n    this.type = type;\n    this.antialiasLevel = antialiasLevel;\n    this.color = color;\n}\n/**\n * @class AppSkinInfo\n * Stores window-skin properties, such as color and font. All color parameter values are \\c #UIColor objects except that systemHighlightColor is \\c #RGBColor object.\n *\n * @param baseFontFamily        The base font family of the application.\n * @param baseFontSize          The base font size of the application.\n * @param appBarBackgroundColor     The application bar background color.\n * @param panelBackgroundColor      The background color of the extension panel.\n * @param appBarBackgroundColorSRGB     The application bar background color, as sRGB.\n * @param panelBackgroundColorSRGB      The background color of the extension panel, as sRGB.\n * @param systemHighlightColor          The highlight color of the extension panel, if provided by the host application. Otherwise, the operating-system highlight color. \n *\n * @return AppSkinInfo object.\n */ function AppSkinInfo(baseFontFamily, baseFontSize, appBarBackgroundColor, panelBackgroundColor, appBarBackgroundColorSRGB, panelBackgroundColorSRGB, systemHighlightColor) {\n    this.baseFontFamily = baseFontFamily;\n    this.baseFontSize = baseFontSize;\n    this.appBarBackgroundColor = appBarBackgroundColor;\n    this.panelBackgroundColor = panelBackgroundColor;\n    this.appBarBackgroundColorSRGB = appBarBackgroundColorSRGB;\n    this.panelBackgroundColorSRGB = panelBackgroundColorSRGB;\n    this.systemHighlightColor = systemHighlightColor;\n}\n/**\n * @class HostEnvironment\n * Stores information about the environment in which the extension is loaded.\n *\n * @param appName   The application's name.\n * @param appVersion    The application's version.\n * @param appLocale The application's current license locale.\n * @param appUILocale   The application's current UI locale.\n * @param appId     The application's unique identifier.\n * @param isAppOnline  True if the application is currently online.\n * @param appSkinInfo   An \\c #AppSkinInfo object containing the application's default color and font styles.\n *\n * @return A new \\c HostEnvironment object.\n */ function HostEnvironment(appName, appVersion, appLocale, appUILocale, appId, isAppOnline, appSkinInfo) {\n    this.appName = appName;\n    this.appVersion = appVersion;\n    this.appLocale = appLocale;\n    this.appUILocale = appUILocale;\n    this.appId = appId;\n    this.isAppOnline = isAppOnline;\n    this.appSkinInfo = appSkinInfo;\n}\n/**\n * @class HostCapabilities\n * Stores information about the host capabilities.\n *\n * @param EXTENDED_PANEL_MENU True if the application supports panel menu.\n * @param EXTENDED_PANEL_ICONS True if the application supports panel icon.\n * @param DELEGATE_APE_ENGINE True if the application supports delegated APE engine.\n * @param SUPPORT_HTML_EXTENSIONS True if the application supports HTML extensions.\n * @param DISABLE_FLASH_EXTENSIONS True if the application disables FLASH extensions.\n *\n * @return A new \\c HostCapabilities object.\n */ function HostCapabilities(EXTENDED_PANEL_MENU, EXTENDED_PANEL_ICONS, DELEGATE_APE_ENGINE, SUPPORT_HTML_EXTENSIONS, DISABLE_FLASH_EXTENSIONS) {\n    this.EXTENDED_PANEL_MENU = EXTENDED_PANEL_MENU;\n    this.EXTENDED_PANEL_ICONS = EXTENDED_PANEL_ICONS;\n    this.DELEGATE_APE_ENGINE = DELEGATE_APE_ENGINE;\n    this.SUPPORT_HTML_EXTENSIONS = SUPPORT_HTML_EXTENSIONS;\n    this.DISABLE_FLASH_EXTENSIONS = DISABLE_FLASH_EXTENSIONS; // Since 5.0.0\n}\n/**\n * @class ApiVersion\n * Stores current api version.\n *\n * Since 4.2.0\n *\n * @param major  The major version\n * @param minor  The minor version.\n * @param micro  The micro version.\n *\n * @return ApiVersion object.\n */ function ApiVersion(major, minor, micro) {\n    this.major = major;\n    this.minor = minor;\n    this.micro = micro;\n}\n/**\n * @class MenuItemStatus\n * Stores flyout menu item status\n *\n * Since 5.2.0\n *\n * @param menuItemLabel  The menu item label.\n * @param enabled  \t\t True if user wants to enable the menu item.\n * @param checked  \t\t True if user wants to check the menu item.\n *\n * @return MenuItemStatus object.\n */ function MenuItemStatus(menuItemLabel, enabled, checked) {\n    this.menuItemLabel = menuItemLabel;\n    this.enabled = enabled;\n    this.checked = checked;\n}\n/**\n * @class ContextMenuItemStatus\n * Stores the status of the context menu item.\n *\n * Since 5.2.0\n *\n * @param menuItemID     The menu item id.\n * @param enabled  \t\t True if user wants to enable the menu item.\n * @param checked  \t\t True if user wants to check the menu item.\n *\n * @return MenuItemStatus object.\n */ function ContextMenuItemStatus(menuItemID, enabled, checked) {\n    this.menuItemID = menuItemID;\n    this.enabled = enabled;\n    this.checked = checked;\n}\n//------------------------------ CSInterface ----------------------------------\n/**\n * @class CSInterface\n * This is the entry point to the CEP extensibility infrastructure.\n * Instantiate this object and use it to:\n * <ul>\n * <li>Access information about the host application in which an extension is running</li>\n * <li>Launch an extension</li>\n * <li>Register interest in event notifications, and dispatch events</li>\n * </ul>\n *\n * @return A new \\c CSInterface object\n */ function CSInterface() {}\n/**\n * User can add this event listener to handle native application theme color changes.\n * Callback function gives extensions ability to fine-tune their theme color after the\n * global theme color has been changed.\n * The callback function should be like below:\n *\n * @example\n * // event is a CSEvent object, but user can ignore it.\n * function OnAppThemeColorChanged(event)\n * {\n *    // Should get a latest HostEnvironment object from application.\n *    var skinInfo = JSON.parse(window.__adobe_cep__.getHostEnvironment()).appSkinInfo;\n *    // Gets the style information such as color info from the skinInfo,\n *    // and redraw all UI controls of your extension according to the style info.\n * }\n */ CSInterface.THEME_COLOR_CHANGED_EVENT = \"com.adobe.csxs.events.ThemeColorChanged\";\n/** The host environment data object. */ CSInterface.prototype.hostEnvironment = window.__adobe_cep__ ? JSON.parse(window.__adobe_cep__.getHostEnvironment()) : null;\n/** Retrieves information about the host environment in which the\n *  extension is currently running.\n *\n *   @return A \\c #HostEnvironment object.\n */ CSInterface.prototype.getHostEnvironment = function() {\n    this.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());\n    return this.hostEnvironment;\n};\n/** Closes this extension. */ CSInterface.prototype.closeExtension = function() {\n    window.__adobe_cep__.closeExtension();\n};\n/**\n * Retrieves a path for which a constant is defined in the system.\n *\n * @param pathType The path-type constant defined in \\c #SystemPath ,\n *\n * @return The platform-specific system path string.\n */ CSInterface.prototype.getSystemPath = function(pathType) {\n    var path = decodeURI(window.__adobe_cep__.getSystemPath(pathType));\n    var OSVersion = this.getOSInformation();\n    if (OSVersion.indexOf(\"Windows\") >= 0) path = path.replace(\"file:///\", \"\");\n    else if (OSVersion.indexOf(\"Mac\") >= 0) path = path.replace(\"file://\", \"\");\n    return path;\n};\n/**\n * Evaluates a JavaScript script, which can use the JavaScript DOM\n * of the host application.\n *\n * @param script    The JavaScript script.\n * @param callback  Optional. A callback function that receives the result of execution.\n *          If execution fails, the callback function receives the error message \\c EvalScript_ErrMessage.\n */ CSInterface.prototype.evalScript = function(script, callback) {\n    if (callback === null || callback === undefined) callback = function(result) {};\n    window.__adobe_cep__.evalScript(script, callback);\n};\n/**\n * Retrieves the unique identifier of the application.\n * in which the extension is currently running.\n *\n * @return The unique ID string.\n */ CSInterface.prototype.getApplicationID = function() {\n    var appId = this.hostEnvironment.appId;\n    return appId;\n};\n/**\n * Retrieves host capability information for the application\n * in which the extension is currently running.\n *\n * @return A \\c #HostCapabilities object.\n */ CSInterface.prototype.getHostCapabilities = function() {\n    var hostCapabilities = JSON.parse(window.__adobe_cep__.getHostCapabilities());\n    return hostCapabilities;\n};\n/**\n * Triggers a CEP event programmatically. Yoy can use it to dispatch\n * an event of a predefined type, or of a type you have defined.\n *\n * @param event A \\c CSEvent object.\n */ CSInterface.prototype.dispatchEvent = function(event) {\n    if (typeof event.data == \"object\") event.data = JSON.stringify(event.data);\n    window.__adobe_cep__.dispatchEvent(event);\n};\n/**\n * Registers an interest in a CEP event of a particular type, and\n * assigns an event handler.\n * The event infrastructure notifies your extension when events of this type occur,\n * passing the event object to the registered handler function.\n *\n * @param type     The name of the event type of interest.\n * @param listener The JavaScript handler function or method.\n * @param obj      Optional, the object containing the handler method, if any.\n *         Default is null.\n */ CSInterface.prototype.addEventListener = function(type, listener, obj) {\n    window.__adobe_cep__.addEventListener(type, listener, obj);\n};\n/**\n * Removes a registered event listener.\n *\n * @param type      The name of the event type of interest.\n * @param listener  The JavaScript handler function or method that was registered.\n * @param obj       Optional, the object containing the handler method, if any.\n *          Default is null.\n */ CSInterface.prototype.removeEventListener = function(type, listener, obj) {\n    window.__adobe_cep__.removeEventListener(type, listener, obj);\n};\n/**\n * Loads and launches another extension, or activates the extension if it is already loaded.\n *\n * @param extensionId       The extension's unique identifier.\n * @param startupParams     Not currently used, pass \"\".\n *\n * @example\n * To launch the extension \"help\" with ID \"HLP\" from this extension, call:\n * <code>requestOpenExtension(\"HLP\", \"\"); </code>\n *\n */ CSInterface.prototype.requestOpenExtension = function(extensionId, params) {\n    window.__adobe_cep__.requestOpenExtension(extensionId, params);\n};\n/**\n * Retrieves the list of extensions currently loaded in the current host application.\n * The extension list is initialized once, and remains the same during the lifetime\n * of the CEP session.\n *\n * @param extensionIds  Optional, an array of unique identifiers for extensions of interest.\n *          If omitted, retrieves data for all extensions.\n *\n * @return Zero or more \\c #Extension objects.\n */ CSInterface.prototype.getExtensions = function(extensionIds) {\n    var extensionIdsStr = JSON.stringify(extensionIds);\n    var extensionsStr = window.__adobe_cep__.getExtensions(extensionIdsStr);\n    var extensions = JSON.parse(extensionsStr);\n    return extensions;\n};\n/**\n * Retrieves network-related preferences.\n *\n * @return A JavaScript object containing network preferences.\n */ CSInterface.prototype.getNetworkPreferences = function() {\n    var result = window.__adobe_cep__.getNetworkPreferences();\n    var networkPre = JSON.parse(result);\n    return networkPre;\n};\n/**\n * Initializes the resource bundle for this extension with property values\n * for the current application and locale.\n * To support multiple locales, you must define a property file for each locale,\n * containing keyed display-string values for that locale.\n * See localization documentation for Extension Builder and related products.\n *\n * Keys can be in the\n * form <code>key.value=\"localized string\"</code>, for use in HTML text elements.\n * For example, in this input element, the localized \\c key.value string is displayed\n * instead of the empty \\c value string:\n *\n * <code><input type=\"submit\" value=\"\" data-locale=\"key\"/></code>\n *\n * @return An object containing the resource bundle information.\n */ CSInterface.prototype.initResourceBundle = function() {\n    var resourceBundle = JSON.parse(window.__adobe_cep__.initResourceBundle());\n    var resElms = document.querySelectorAll('[data-locale]');\n    for(var n = 0; n < resElms.length; n++){\n        var resEl = resElms[n];\n        // Get the resource key from the element.\n        var resKey = resEl.getAttribute('data-locale');\n        if (resKey) {\n            // Get all the resources that start with the key.\n            for(var key in resourceBundle)if (key.indexOf(resKey) === 0) {\n                var resValue = resourceBundle[key];\n                if (key.length == resKey.length) resEl.innerHTML = resValue;\n                else if ('.' == key.charAt(resKey.length)) {\n                    var attrKey = key.substring(resKey.length + 1);\n                    resEl[attrKey] = resValue;\n                }\n            }\n        }\n    }\n    return resourceBundle;\n};\n/**\n * Writes installation information to a file.\n *\n * @return The file path.\n */ CSInterface.prototype.dumpInstallationInfo = function() {\n    return window.__adobe_cep__.dumpInstallationInfo();\n};\n/**\n * Retrieves version information for the current Operating System,\n * See http://www.useragentstring.com/pages/Chrome/ for Chrome \\c navigator.userAgent values.\n *\n * @return A string containing the OS version, or \"unknown Operation System\".\n * If user customizes the User Agent by setting CEF command parameter \"--user-agent\", only\n * \"Mac OS X\" or \"Windows\" will be returned. \n */ CSInterface.prototype.getOSInformation = function() {\n    var userAgent = navigator.userAgent;\n    if (navigator.platform == \"Win32\" || navigator.platform == \"Windows\") {\n        var winVersion = \"Windows\";\n        var winBit = \"\";\n        if (userAgent.indexOf(\"Windows\") > -1) {\n            if (userAgent.indexOf(\"Windows NT 5.0\") > -1) winVersion = \"Windows 2000\";\n            else if (userAgent.indexOf(\"Windows NT 5.1\") > -1) winVersion = \"Windows XP\";\n            else if (userAgent.indexOf(\"Windows NT 5.2\") > -1) winVersion = \"Windows Server 2003\";\n            else if (userAgent.indexOf(\"Windows NT 6.0\") > -1) winVersion = \"Windows Vista\";\n            else if (userAgent.indexOf(\"Windows NT 6.1\") > -1) winVersion = \"Windows 7\";\n            else if (userAgent.indexOf(\"Windows NT 6.2\") > -1) winVersion = \"Windows 8\";\n            else if (userAgent.indexOf(\"Windows NT 6.3\") > -1) winVersion = \"Windows 8.1\";\n            else if (userAgent.indexOf(\"Windows NT 10\") > -1) winVersion = \"Windows 10\";\n            if (userAgent.indexOf(\"WOW64\") > -1 || userAgent.indexOf(\"Win64\") > -1) winBit = \" 64-bit\";\n            else winBit = \" 32-bit\";\n        }\n        return winVersion + winBit;\n    } else if (navigator.platform == \"MacIntel\" || navigator.platform == \"Macintosh\") {\n        var result = \"Mac OS X\";\n        if (userAgent.indexOf(\"Mac OS X\") > -1) {\n            result = userAgent.substring(userAgent.indexOf(\"Mac OS X\"), userAgent.indexOf(\")\"));\n            result = result.replace(/_/g, \".\");\n        }\n        return result;\n    }\n    return \"Unknown Operation System\";\n};\n/**\n * Opens a page in the default system browser.\n *\n * Since 4.2.0\n *\n * @param url  The URL of the page/file to open, or the email address.\n * Must use HTTP/HTTPS/file/mailto protocol. For example:\n *   \"http://www.adobe.com\"\n *   \"https://github.com\"\n *   \"file:///C:/log.txt\"\n *   \"mailto:test@adobe.com\"\n *\n * @return One of these error codes:\\n\n *      <ul>\\n\n *          <li>NO_ERROR - 0</li>\\n\n *          <li>ERR_UNKNOWN - 1</li>\\n\n *          <li>ERR_INVALID_PARAMS - 2</li>\\n\n *          <li>ERR_INVALID_URL - 201</li>\\n\n *      </ul>\\n\n */ CSInterface.prototype.openURLInDefaultBrowser = function(url) {\n    return cep.util.openURLInDefaultBrowser(url);\n};\n/**\n * Retrieves extension ID.\n *\n * Since 4.2.0\n *\n * @return extension ID.\n */ CSInterface.prototype.getExtensionID = function() {\n    return window.__adobe_cep__.getExtensionId();\n};\n/**\n * Retrieves the scale factor of screen. \n * On Windows platform, the value of scale factor might be different from operating system's scale factor,\n * since host application may use its self-defined scale factor.\n *\n * Since 4.2.0\n *\n * @return One of the following float number.\n *      <ul>\\n\n *          <li> -1.0 when error occurs </li>\\n\n *          <li> 1.0 means normal screen </li>\\n\n *          <li> >1.0 means HiDPI screen </li>\\n\n *      </ul>\\n\n */ CSInterface.prototype.getScaleFactor = function() {\n    return window.__adobe_cep__.getScaleFactor();\n};\n/**\n * Set a handler to detect any changes of scale factor. This only works on Mac.\n *\n * Since 4.2.0\n *\n * @param handler   The function to be called when scale factor is changed.\n *\n */ CSInterface.prototype.setScaleFactorChangedHandler = function(handler) {\n    window.__adobe_cep__.setScaleFactorChangedHandler(handler);\n};\n/**\n * Retrieves current API version.\n *\n * Since 4.2.0\n *\n * @return ApiVersion object.\n *\n */ CSInterface.prototype.getCurrentApiVersion = function() {\n    var apiVersion = JSON.parse(window.__adobe_cep__.getCurrentApiVersion());\n    return apiVersion;\n};\n/**\n * Set panel flyout menu by an XML.\n *\n * Since 5.2.0\n *\n * Register a callback function for \"com.adobe.csxs.events.flyoutMenuClicked\" to get notified when a \n * menu item is clicked.\n * The \"data\" attribute of event is an object which contains \"menuId\" and \"menuName\" attributes. \n *\n * Register callback functions for \"com.adobe.csxs.events.flyoutMenuOpened\" and \"com.adobe.csxs.events.flyoutMenuClosed\"\n * respectively to get notified when flyout menu is opened or closed.\n *\n * @param menu     A XML string which describes menu structure.\n * An example menu XML:\n * <Menu>\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checked=\"false\"/>\n *   <MenuItem Label=\"TestExample2\">\n *     <MenuItem Label=\"TestExample2-1\" >\n *       <MenuItem Label=\"TestExample2-1-1\" Enabled=\"false\" Checked=\"true\"/>\n *     </MenuItem>\n *     <MenuItem Label=\"TestExample2-2\" Enabled=\"true\" Checked=\"true\"/>\n *   </MenuItem>\n *   <MenuItem Label=\"---\" />\n *   <MenuItem Label=\"TestExample3\" Enabled=\"false\" Checked=\"false\"/>\n * </Menu>\n *\n */ CSInterface.prototype.setPanelFlyoutMenu = function(menu) {\n    if (\"string\" != typeof menu) return;\n    window.__adobe_cep__.invokeSync(\"setPanelFlyoutMenu\", menu);\n};\n/**\n * Updates a menu item in the extension window's flyout menu, by setting the enabled\n * and selection status.\n *  \n * Since 5.2.0\n *\n * @param menuItemLabel\tThe menu item label. \n * @param enabled\t\tTrue to enable the item, false to disable it (gray it out).\n * @param checked\t\tTrue to select the item, false to deselect it.\n *\n * @return false when the host application does not support this functionality (HostCapabilities.EXTENDED_PANEL_MENU is false). \n *         Fails silently if menu label is invalid.\n *\n * @see HostCapabilities.EXTENDED_PANEL_MENU\n */ CSInterface.prototype.updatePanelMenuItem = function(menuItemLabel, enabled, checked) {\n    var ret1 = false;\n    if (this.getHostCapabilities().EXTENDED_PANEL_MENU) {\n        var itemStatus = new MenuItemStatus(menuItemLabel, enabled, checked);\n        ret1 = window.__adobe_cep__.invokeSync(\"updatePanelMenuItem\", JSON.stringify(itemStatus));\n    }\n    return ret1;\n};\n/**\n * Set context menu by XML string.\n *\n * Since 5.2.0\n *\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\n * - an item without menu ID or menu name is disabled and is not shown.\n * - if the item name is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\n * - Checkable attribute takes precedence over Checked attribute.\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item. \n     The Chrome extension contextMenus API was taken as a reference. \n     https://developer.chrome.com/extensions/contextMenus\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\n *\n * @param menu      A XML string which describes menu structure.\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\n *\n * @description An example menu XML:\n * <Menu>\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checkable=\"true\" Checked=\"false\" Icon=\"./image/small_16X16.png\"/>\n *   <MenuItem Id=\"menuItemId2\" Label=\"TestExample2\">\n *     <MenuItem Id=\"menuItemId2-1\" Label=\"TestExample2-1\" >\n *       <MenuItem Id=\"menuItemId2-1-1\" Label=\"TestExample2-1-1\" Enabled=\"false\" Checkable=\"true\" Checked=\"true\"/>\n *     </MenuItem>\n *     <MenuItem Id=\"menuItemId2-2\" Label=\"TestExample2-2\" Enabled=\"true\" Checkable=\"true\" Checked=\"true\"/>\n *   </MenuItem>\n *   <MenuItem Label=\"---\" />\n *   <MenuItem Id=\"menuItemId3\" Label=\"TestExample3\" Enabled=\"false\" Checkable=\"true\" Checked=\"false\"/>\n * </Menu>\n */ CSInterface.prototype.setContextMenu = function(menu, callback) {\n    if (\"string\" != typeof menu) return;\n    window.__adobe_cep__.invokeAsync(\"setContextMenu\", menu, callback);\n};\n/**\n * Set context menu by JSON string.\n *\n * Since 6.0.0\n *\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\n * - an item without menu ID or menu name is disabled and is not shown.\n * - if the item label is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\n * - Checkable attribute takes precedence over Checked attribute.\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item. \n     The Chrome extension contextMenus API was taken as a reference.\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\n     https://developer.chrome.com/extensions/contextMenus\n *\n * @param menu      A JSON string which describes menu structure.\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\n *\n * @description An example menu JSON:\n *\n * { \n *      \"menu\": [\n *          {\n *              \"id\": \"menuItemId1\",\n *              \"label\": \"testExample1\",\n *              \"enabled\": true,\n *              \"checkable\": true,\n *              \"checked\": false,\n *              \"icon\": \"./image/small_16X16.png\"\n *          },\n *          {\n *              \"id\": \"menuItemId2\",\n *              \"label\": \"testExample2\",\n *              \"menu\": [\n *                  {\n *                      \"id\": \"menuItemId2-1\",\n *                      \"label\": \"testExample2-1\",\n *                      \"menu\": [\n *                          {\n *                              \"id\": \"menuItemId2-1-1\",\n *                              \"label\": \"testExample2-1-1\",\n *                              \"enabled\": false,\n *                              \"checkable\": true,\n *                              \"checked\": true\n *                          }\n *                      ]\n *                  },\n *                  {\n *                      \"id\": \"menuItemId2-2\",\n *                      \"label\": \"testExample2-2\",\n *                      \"enabled\": true,\n *                      \"checkable\": true,\n *                      \"checked\": true\n *                  }\n *              ]\n *          },\n *          {\n *              \"label\": \"---\"\n *          },\n *          {\n *              \"id\": \"menuItemId3\",\n *              \"label\": \"testExample3\",\n *              \"enabled\": false,\n *              \"checkable\": true,\n *              \"checked\": false\n *          }\n *      ]\n *  }\n *\n */ CSInterface.prototype.setContextMenuByJSON = function(menu, callback) {\n    if (\"string\" != typeof menu) return;\n    window.__adobe_cep__.invokeAsync(\"setContextMenuByJSON\", menu, callback);\n};\n/**\n * Updates a context menu item by setting the enabled and selection status.\n *  \n * Since 5.2.0\n *\n * @param menuItemID\tThe menu item ID. \n * @param enabled\t\tTrue to enable the item, false to disable it (gray it out).\n * @param checked\t\tTrue to select the item, false to deselect it.\n */ CSInterface.prototype.updateContextMenuItem = function(menuItemID, enabled, checked) {\n    var itemStatus = new ContextMenuItemStatus(menuItemID, enabled, checked);\n    ret = window.__adobe_cep__.invokeSync(\"updateContextMenuItem\", JSON.stringify(itemStatus));\n};\n/**\n * Get the visibility status of an extension window. \n *  \n * Since 6.0.0\n *\n * @return true if the extension window is visible; false if the extension window is hidden.\n */ CSInterface.prototype.isWindowVisible = function() {\n    return window.__adobe_cep__.invokeSync(\"isWindowVisible\", \"\");\n};\n/**\n * Resize extension's content to the specified dimensions.\n * 1. Works with modal and modeless extensions in all Adobe products.\n * 2. Extension's manifest min/max size constraints apply and take precedence. \n * 3. For panel extensions\n *    3.1 This works in all Adobe products except:\n *        * Premiere Pro\n *        * Prelude\n *        * After Effects\n *    3.2 When the panel is in certain states (especially when being docked),\n *        it will not change to the desired dimensions even when the\n *        specified size satisfies min/max constraints.\n *\n * Since 6.0.0\n *\n * @param width  The new width\n * @param height The new height\n */ CSInterface.prototype.resizeContent = function(width, height) {\n    window.__adobe_cep__.resizeContent(width, height);\n};\n/**\n * Register the invalid certificate callback for an extension. \n * This callback will be triggered when the extension tries to access the web site that contains the invalid certificate on the main frame.\n * But if the extension does not call this function and tries to access the web site containing the invalid certificate, a default error page will be shown.\n *  \n * Since 6.1.0\n *\n * @param callback the callback function\n */ CSInterface.prototype.registerInvalidCertificateCallback = function(callback) {\n    return window.__adobe_cep__.registerInvalidCertificateCallback(callback);\n};\n/**\n * Register an interest in some key events to prevent them from being sent to the host application.\n *\n * This function works with modeless extensions and panel extensions. \n * Generally all the key events will be sent to the host application for these two extensions if the current focused element\n * is not text input or dropdown,\n * If you want to intercept some key events and want them to be handled in the extension, please call this function\n * in advance to prevent them being sent to the host application.\n *\n * Since 6.1.0\n *\n * @param keyEventsInterest      A JSON string describing those key events you are interested in. A null object or\n                                 an empty string will lead to removing the interest\n *\n * This JSON string should be an array, each object has following keys:\n *\n * keyCode:  [Required] represents an OS system dependent virtual key code identifying\n *           the unmodified value of the pressed key.\n * ctrlKey:  [optional] a Boolean that indicates if the control key was pressed (true) or not (false) when the event occurred.\n * altKey:   [optional] a Boolean that indicates if the alt key was pressed (true) or not (false) when the event occurred.\n * shiftKey: [optional] a Boolean that indicates if the shift key was pressed (true) or not (false) when the event occurred.\n * metaKey:  [optional] (Mac Only) a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred.\n *                      On Macintosh keyboards, this is the command key. To detect Windows key on Windows, please use keyCode instead.\n * An example JSON string:\n *\n * [\n *     {\n *         \"keyCode\": 48\n *     },\n *     {\n *         \"keyCode\": 123,\n *         \"ctrlKey\": true\n *     },\n *     {\n *         \"keyCode\": 123,\n *         \"ctrlKey\": true,\n *         \"metaKey\": true\n *     }\n * ]\n *\n */ CSInterface.prototype.registerKeyEventsInterest = function(keyEventsInterest) {\n    return window.__adobe_cep__.registerKeyEventsInterest(keyEventsInterest);\n};\n/**\n * Set the title of the extension window. \n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\n *\n * Since 6.1.0\n *\n * @param title The window title.\n */ CSInterface.prototype.setWindowTitle = function(title) {\n    window.__adobe_cep__.invokeSync(\"setWindowTitle\", title);\n};\n/**\n * Get the title of the extension window. \n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\n *\n * Since 6.1.0\n *\n * @return The window title.\n */ CSInterface.prototype.getWindowTitle = function() {\n    return window.__adobe_cep__.invokeSync(\"getWindowTitle\", \"\");\n};\n\n//# sourceMappingURL=index.3aee32b3.js.map\n","/**************************************************************************************************\n*\n* ADOBE INC.\n* Copyright 2013 Adobe Inc.\n* All Rights Reserved.\n*\n* NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the\n* terms of the Adobe license agreement accompanying it.  If you have received this file from a\n* source other than Adobe, then your use, modification, or distribution of it requires the prior\n* written permission of Adobe.\n*\n**************************************************************************************************/\n\n/** CSInterface - v8.0.0 */\n\n/**\n * Stores constants for the window types supported by the CSXS infrastructure.\n */\nfunction CSXSWindowType() {\n}\n\n/** Constant for the CSXS window type Panel. */\nCSXSWindowType._PANEL = \"Panel\";\n\n/** Constant for the CSXS window type Modeless. */\nCSXSWindowType._MODELESS = \"Modeless\";\n\n/** Constant for the CSXS window type ModalDialog. */\nCSXSWindowType._MODAL_DIALOG = \"ModalDialog\";\n\n/** EvalScript error message */\nEvalScript_ErrMessage = \"EvalScript error.\";\n\n/**\n * @class Version\n * Defines a version number with major, minor, micro, and special\n * components. The major, minor and micro values are numeric; the special\n * value can be any string.\n *\n * @param major   The major version component, a positive integer up to nine digits long.\n * @param minor   The minor version component, a positive integer up to nine digits long.\n * @param micro   The micro version component, a positive integer up to nine digits long.\n * @param special The special version component, an arbitrary string.\n *\n * @return A new \\c Version object.\n */\nfunction Version(major, minor, micro, special) {\n    this.major = major;\n    this.minor = minor;\n    this.micro = micro;\n    this.special = special;\n}\n\n/**\n * The maximum value allowed for a numeric version component.\n * This reflects the maximum value allowed in PlugPlug and the manifest schema.\n */\nVersion.MAX_NUM = 999999999;\n\n/**\n * @class VersionBound\n * Defines a boundary for a version range, which associates a \\c Version object\n * with a flag for whether it is an inclusive or exclusive boundary.\n *\n * @param version   The \\c #Version object.\n * @param inclusive True if this boundary is inclusive, false if it is exclusive.\n *\n * @return A new \\c VersionBound object.\n */\nfunction VersionBound(version, inclusive) {\n    this.version = version;\n    this.inclusive = inclusive;\n}\n\n/**\n * @class VersionRange\n * Defines a range of versions using a lower boundary and optional upper boundary.\n *\n * @param lowerBound The \\c #VersionBound object.\n * @param upperBound The \\c #VersionBound object, or null for a range with no upper boundary.\n *\n * @return A new \\c VersionRange object.\n */\nfunction VersionRange(lowerBound, upperBound) {\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n}\n\n/**\n * @class Runtime\n * Represents a runtime related to the CEP infrastructure.\n * Extensions can declare dependencies on particular\n * CEP runtime versions in the extension manifest.\n *\n * @param name    The runtime name.\n * @param version A \\c #VersionRange object that defines a range of valid versions.\n *\n * @return A new \\c Runtime object.\n */\nfunction Runtime(name, versionRange) {\n    this.name = name;\n    this.versionRange = versionRange;\n}\n\n/**\n* @class Extension\n* Encapsulates a CEP-based extension to an Adobe application.\n*\n* @param id              The unique identifier of this extension.\n* @param name            The localizable display name of this extension.\n* @param mainPath        The path of the \"index.html\" file.\n* @param basePath        The base path of this extension.\n* @param windowType          The window type of the main window of this extension.\n                 Valid values are defined by \\c #CSXSWindowType.\n* @param width           The default width in pixels of the main window of this extension.\n* @param height          The default height in pixels of the main window of this extension.\n* @param minWidth        The minimum width in pixels of the main window of this extension.\n* @param minHeight       The minimum height in pixels of the main window of this extension.\n* @param maxWidth        The maximum width in pixels of the main window of this extension.\n* @param maxHeight       The maximum height in pixels of the main window of this extension.\n* @param defaultExtensionDataXml The extension data contained in the default \\c ExtensionDispatchInfo section of the extension manifest.\n* @param specialExtensionDataXml The extension data contained in the application-specific \\c ExtensionDispatchInfo section of the extension manifest.\n* @param requiredRuntimeList     An array of \\c Runtime objects for runtimes required by this extension.\n* @param isAutoVisible       True if this extension is visible on loading.\n* @param isPluginExtension   True if this extension has been deployed in the Plugins folder of the host application.\n*\n* @return A new \\c Extension object.\n*/\nfunction Extension(id, name, mainPath, basePath, windowType, width, height, minWidth, minHeight, maxWidth, maxHeight,\n    defaultExtensionDataXml, specialExtensionDataXml, requiredRuntimeList, isAutoVisible, isPluginExtension) {\n    this.id = id;\n    this.name = name;\n    this.mainPath = mainPath;\n    this.basePath = basePath;\n    this.windowType = windowType;\n    this.width = width;\n    this.height = height;\n    this.minWidth = minWidth;\n    this.minHeight = minHeight;\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this.defaultExtensionDataXml = defaultExtensionDataXml;\n    this.specialExtensionDataXml = specialExtensionDataXml;\n    this.requiredRuntimeList = requiredRuntimeList;\n    this.isAutoVisible = isAutoVisible;\n    this.isPluginExtension = isPluginExtension;\n}\n\n/**\n * @class CSEvent\n * A standard JavaScript event, the base class for CEP events.\n *\n * @param type        The name of the event type.\n * @param scope       The scope of event, can be \"GLOBAL\" or \"APPLICATION\".\n * @param appId       The unique identifier of the application that generated the event.\n * @param extensionId     The unique identifier of the extension that generated the event.\n *\n * @return A new \\c CSEvent object\n */\nfunction CSEvent(type, scope, appId, extensionId) {\n    this.type = type;\n    this.scope = scope;\n    this.appId = appId;\n    this.extensionId = extensionId;\n}\n\n/** Event-specific data. */\nCSEvent.prototype.data = \"\";\n\n/**\n * @class SystemPath\n * Stores operating-system-specific location constants for use in the\n * \\c #CSInterface.getSystemPath() method.\n * @return A new \\c SystemPath object.\n */\nfunction SystemPath() {\n}\n\n/** The path to user data.  */\nSystemPath.USER_DATA = \"userData\";\n\n/** The path to common files for Adobe applications.  */\nSystemPath.COMMON_FILES = \"commonFiles\";\n\n/** The path to the user's default document folder.  */\nSystemPath.MY_DOCUMENTS = \"myDocuments\";\n\n/** @deprecated. Use \\c #SystemPath.Extension.  */\nSystemPath.APPLICATION = \"application\";\n\n/** The path to current extension.  */\nSystemPath.EXTENSION = \"extension\";\n\n/** The path to hosting application's executable.  */\nSystemPath.HOST_APPLICATION = \"hostApplication\";\n\n/**\n * @class ColorType\n * Stores color-type constants.\n */\nfunction ColorType() {\n}\n\n/** RGB color type. */\nColorType.RGB = \"rgb\";\n\n/** Gradient color type. */\nColorType.GRADIENT = \"gradient\";\n\n/** Null color type. */\nColorType.NONE = \"none\";\n\n/**\n * @class RGBColor\n * Stores an RGB color with red, green, blue, and alpha values.\n * All values are in the range [0.0 to 255.0]. Invalid numeric values are\n * converted to numbers within this range.\n *\n * @param red   The red value, in the range [0.0 to 255.0].\n * @param green The green value, in the range [0.0 to 255.0].\n * @param blue  The blue value, in the range [0.0 to 255.0].\n * @param alpha The alpha (transparency) value, in the range [0.0 to 255.0].\n *      The default, 255.0, means that the color is fully opaque.\n *\n * @return A new RGBColor object.\n */\nfunction RGBColor(red, green, blue, alpha) {\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n    this.alpha = alpha;\n}\n\n/**\n * @class Direction\n * A point value  in which the y component is 0 and the x component\n * is positive or negative for a right or left direction,\n * or the x component is 0 and the y component is positive or negative for\n * an up or down direction.\n *\n * @param x     The horizontal component of the point.\n * @param y     The vertical component of the point.\n *\n * @return A new \\c Direction object.\n */\nfunction Direction(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\n/**\n * @class GradientStop\n * Stores gradient stop information.\n *\n * @param offset   The offset of the gradient stop, in the range [0.0 to 1.0].\n * @param rgbColor The color of the gradient at this point, an \\c #RGBColor object.\n *\n * @return GradientStop object.\n */\nfunction GradientStop(offset, rgbColor) {\n    this.offset = offset;\n    this.rgbColor = rgbColor;\n}\n\n/**\n * @class GradientColor\n * Stores gradient color information.\n *\n * @param type          The gradient type, must be \"linear\".\n * @param direction     A \\c #Direction object for the direction of the gradient\n                (up, down, right, or left).\n * @param numStops          The number of stops in the gradient.\n * @param gradientStopList  An array of \\c #GradientStop objects.\n *\n * @return A new \\c GradientColor object.\n */\nfunction GradientColor(type, direction, numStops, arrGradientStop) {\n    this.type = type;\n    this.direction = direction;\n    this.numStops = numStops;\n    this.arrGradientStop = arrGradientStop;\n}\n\n/**\n * @class UIColor\n * Stores color information, including the type, anti-alias level, and specific color\n * values in a color object of an appropriate type.\n *\n * @param type          The color type, 1 for \"rgb\" and 2 for \"gradient\".\n                The supplied color object must correspond to this type.\n * @param antialiasLevel    The anti-alias level constant.\n * @param color         A \\c #RGBColor or \\c #GradientColor object containing specific color information.\n *\n * @return A new \\c UIColor object.\n */\nfunction UIColor(type, antialiasLevel, color) {\n    this.type = type;\n    this.antialiasLevel = antialiasLevel;\n    this.color = color;\n}\n\n/**\n * @class AppSkinInfo\n * Stores window-skin properties, such as color and font. All color parameter values are \\c #UIColor objects except that systemHighlightColor is \\c #RGBColor object.\n *\n * @param baseFontFamily        The base font family of the application.\n * @param baseFontSize          The base font size of the application.\n * @param appBarBackgroundColor     The application bar background color.\n * @param panelBackgroundColor      The background color of the extension panel.\n * @param appBarBackgroundColorSRGB     The application bar background color, as sRGB.\n * @param panelBackgroundColorSRGB      The background color of the extension panel, as sRGB.\n * @param systemHighlightColor          The highlight color of the extension panel, if provided by the host application. Otherwise, the operating-system highlight color. \n *\n * @return AppSkinInfo object.\n */\nfunction AppSkinInfo(baseFontFamily, baseFontSize, appBarBackgroundColor, panelBackgroundColor, appBarBackgroundColorSRGB, panelBackgroundColorSRGB, systemHighlightColor) {\n    this.baseFontFamily = baseFontFamily;\n    this.baseFontSize = baseFontSize;\n    this.appBarBackgroundColor = appBarBackgroundColor;\n    this.panelBackgroundColor = panelBackgroundColor;\n    this.appBarBackgroundColorSRGB = appBarBackgroundColorSRGB;\n    this.panelBackgroundColorSRGB = panelBackgroundColorSRGB;\n    this.systemHighlightColor = systemHighlightColor;\n}\n\n/**\n * @class HostEnvironment\n * Stores information about the environment in which the extension is loaded.\n *\n * @param appName   The application's name.\n * @param appVersion    The application's version.\n * @param appLocale The application's current license locale.\n * @param appUILocale   The application's current UI locale.\n * @param appId     The application's unique identifier.\n * @param isAppOnline  True if the application is currently online.\n * @param appSkinInfo   An \\c #AppSkinInfo object containing the application's default color and font styles.\n *\n * @return A new \\c HostEnvironment object.\n */\nfunction HostEnvironment(appName, appVersion, appLocale, appUILocale, appId, isAppOnline, appSkinInfo) {\n    this.appName = appName;\n    this.appVersion = appVersion;\n    this.appLocale = appLocale;\n    this.appUILocale = appUILocale;\n    this.appId = appId;\n    this.isAppOnline = isAppOnline;\n    this.appSkinInfo = appSkinInfo;\n}\n\n/**\n * @class HostCapabilities\n * Stores information about the host capabilities.\n *\n * @param EXTENDED_PANEL_MENU True if the application supports panel menu.\n * @param EXTENDED_PANEL_ICONS True if the application supports panel icon.\n * @param DELEGATE_APE_ENGINE True if the application supports delegated APE engine.\n * @param SUPPORT_HTML_EXTENSIONS True if the application supports HTML extensions.\n * @param DISABLE_FLASH_EXTENSIONS True if the application disables FLASH extensions.\n *\n * @return A new \\c HostCapabilities object.\n */\nfunction HostCapabilities(EXTENDED_PANEL_MENU, EXTENDED_PANEL_ICONS, DELEGATE_APE_ENGINE, SUPPORT_HTML_EXTENSIONS, DISABLE_FLASH_EXTENSIONS) {\n    this.EXTENDED_PANEL_MENU = EXTENDED_PANEL_MENU;\n    this.EXTENDED_PANEL_ICONS = EXTENDED_PANEL_ICONS;\n    this.DELEGATE_APE_ENGINE = DELEGATE_APE_ENGINE;\n    this.SUPPORT_HTML_EXTENSIONS = SUPPORT_HTML_EXTENSIONS;\n    this.DISABLE_FLASH_EXTENSIONS = DISABLE_FLASH_EXTENSIONS; // Since 5.0.0\n}\n\n/**\n * @class ApiVersion\n * Stores current api version.\n *\n * Since 4.2.0\n *\n * @param major  The major version\n * @param minor  The minor version.\n * @param micro  The micro version.\n *\n * @return ApiVersion object.\n */\nfunction ApiVersion(major, minor, micro) {\n    this.major = major;\n    this.minor = minor;\n    this.micro = micro;\n}\n\n/**\n * @class MenuItemStatus\n * Stores flyout menu item status\n *\n * Since 5.2.0\n *\n * @param menuItemLabel  The menu item label.\n * @param enabled  \t\t True if user wants to enable the menu item.\n * @param checked  \t\t True if user wants to check the menu item.\n *\n * @return MenuItemStatus object.\n */\nfunction MenuItemStatus(menuItemLabel, enabled, checked) {\n    this.menuItemLabel = menuItemLabel;\n    this.enabled = enabled;\n    this.checked = checked;\n}\n\n/**\n * @class ContextMenuItemStatus\n * Stores the status of the context menu item.\n *\n * Since 5.2.0\n *\n * @param menuItemID     The menu item id.\n * @param enabled  \t\t True if user wants to enable the menu item.\n * @param checked  \t\t True if user wants to check the menu item.\n *\n * @return MenuItemStatus object.\n */\nfunction ContextMenuItemStatus(menuItemID, enabled, checked) {\n    this.menuItemID = menuItemID;\n    this.enabled = enabled;\n    this.checked = checked;\n}\n//------------------------------ CSInterface ----------------------------------\n\n/**\n * @class CSInterface\n * This is the entry point to the CEP extensibility infrastructure.\n * Instantiate this object and use it to:\n * <ul>\n * <li>Access information about the host application in which an extension is running</li>\n * <li>Launch an extension</li>\n * <li>Register interest in event notifications, and dispatch events</li>\n * </ul>\n *\n * @return A new \\c CSInterface object\n */\nfunction CSInterface() {\n}\n\n/**\n * User can add this event listener to handle native application theme color changes.\n * Callback function gives extensions ability to fine-tune their theme color after the\n * global theme color has been changed.\n * The callback function should be like below:\n *\n * @example\n * // event is a CSEvent object, but user can ignore it.\n * function OnAppThemeColorChanged(event)\n * {\n *    // Should get a latest HostEnvironment object from application.\n *    var skinInfo = JSON.parse(window.__adobe_cep__.getHostEnvironment()).appSkinInfo;\n *    // Gets the style information such as color info from the skinInfo,\n *    // and redraw all UI controls of your extension according to the style info.\n * }\n */\nCSInterface.THEME_COLOR_CHANGED_EVENT = \"com.adobe.csxs.events.ThemeColorChanged\";\n\n/** The host environment data object. */\nCSInterface.prototype.hostEnvironment = window.__adobe_cep__ ? JSON.parse(window.__adobe_cep__.getHostEnvironment()) : null;\n\n/** Retrieves information about the host environment in which the\n *  extension is currently running.\n *\n *   @return A \\c #HostEnvironment object.\n */\nCSInterface.prototype.getHostEnvironment = function () {\n    this.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());\n    return this.hostEnvironment;\n};\n\n/** Closes this extension. */\nCSInterface.prototype.closeExtension = function () {\n    window.__adobe_cep__.closeExtension();\n};\n\n/**\n * Retrieves a path for which a constant is defined in the system.\n *\n * @param pathType The path-type constant defined in \\c #SystemPath ,\n *\n * @return The platform-specific system path string.\n */\nCSInterface.prototype.getSystemPath = function (pathType) {\n    var path = decodeURI(window.__adobe_cep__.getSystemPath(pathType));\n    var OSVersion = this.getOSInformation();\n    if (OSVersion.indexOf(\"Windows\") >= 0) {\n        path = path.replace(\"file:///\", \"\");\n    }\n    else if (OSVersion.indexOf(\"Mac\") >= 0) {\n        path = path.replace(\"file://\", \"\");\n    }\n    return path;\n};\n\n/**\n * Evaluates a JavaScript script, which can use the JavaScript DOM\n * of the host application.\n *\n * @param script    The JavaScript script.\n * @param callback  Optional. A callback function that receives the result of execution.\n *          If execution fails, the callback function receives the error message \\c EvalScript_ErrMessage.\n */\nCSInterface.prototype.evalScript = function (script, callback) {\n    if (callback === null || callback === undefined) {\n        callback = function (result) { };\n    }\n    window.__adobe_cep__.evalScript(script, callback);\n};\n\n/**\n * Retrieves the unique identifier of the application.\n * in which the extension is currently running.\n *\n * @return The unique ID string.\n */\nCSInterface.prototype.getApplicationID = function () {\n    var appId = this.hostEnvironment.appId;\n    return appId;\n};\n\n/**\n * Retrieves host capability information for the application\n * in which the extension is currently running.\n *\n * @return A \\c #HostCapabilities object.\n */\nCSInterface.prototype.getHostCapabilities = function () {\n    var hostCapabilities = JSON.parse(window.__adobe_cep__.getHostCapabilities());\n    return hostCapabilities;\n};\n\n/**\n * Triggers a CEP event programmatically. Yoy can use it to dispatch\n * an event of a predefined type, or of a type you have defined.\n *\n * @param event A \\c CSEvent object.\n */\nCSInterface.prototype.dispatchEvent = function (event) {\n    if (typeof event.data == \"object\") {\n        event.data = JSON.stringify(event.data);\n    }\n\n    window.__adobe_cep__.dispatchEvent(event);\n};\n\n/**\n * Registers an interest in a CEP event of a particular type, and\n * assigns an event handler.\n * The event infrastructure notifies your extension when events of this type occur,\n * passing the event object to the registered handler function.\n *\n * @param type     The name of the event type of interest.\n * @param listener The JavaScript handler function or method.\n * @param obj      Optional, the object containing the handler method, if any.\n *         Default is null.\n */\nCSInterface.prototype.addEventListener = function (type, listener, obj) {\n    window.__adobe_cep__.addEventListener(type, listener, obj);\n};\n\n/**\n * Removes a registered event listener.\n *\n * @param type      The name of the event type of interest.\n * @param listener  The JavaScript handler function or method that was registered.\n * @param obj       Optional, the object containing the handler method, if any.\n *          Default is null.\n */\nCSInterface.prototype.removeEventListener = function (type, listener, obj) {\n    window.__adobe_cep__.removeEventListener(type, listener, obj);\n};\n\n/**\n * Loads and launches another extension, or activates the extension if it is already loaded.\n *\n * @param extensionId       The extension's unique identifier.\n * @param startupParams     Not currently used, pass \"\".\n *\n * @example\n * To launch the extension \"help\" with ID \"HLP\" from this extension, call:\n * <code>requestOpenExtension(\"HLP\", \"\"); </code>\n *\n */\nCSInterface.prototype.requestOpenExtension = function (extensionId, params) {\n    window.__adobe_cep__.requestOpenExtension(extensionId, params);\n};\n\n/**\n * Retrieves the list of extensions currently loaded in the current host application.\n * The extension list is initialized once, and remains the same during the lifetime\n * of the CEP session.\n *\n * @param extensionIds  Optional, an array of unique identifiers for extensions of interest.\n *          If omitted, retrieves data for all extensions.\n *\n * @return Zero or more \\c #Extension objects.\n */\nCSInterface.prototype.getExtensions = function (extensionIds) {\n    var extensionIdsStr = JSON.stringify(extensionIds);\n    var extensionsStr = window.__adobe_cep__.getExtensions(extensionIdsStr);\n\n    var extensions = JSON.parse(extensionsStr);\n    return extensions;\n};\n\n/**\n * Retrieves network-related preferences.\n *\n * @return A JavaScript object containing network preferences.\n */\nCSInterface.prototype.getNetworkPreferences = function () {\n    var result = window.__adobe_cep__.getNetworkPreferences();\n    var networkPre = JSON.parse(result);\n\n    return networkPre;\n};\n\n/**\n * Initializes the resource bundle for this extension with property values\n * for the current application and locale.\n * To support multiple locales, you must define a property file for each locale,\n * containing keyed display-string values for that locale.\n * See localization documentation for Extension Builder and related products.\n *\n * Keys can be in the\n * form <code>key.value=\"localized string\"</code>, for use in HTML text elements.\n * For example, in this input element, the localized \\c key.value string is displayed\n * instead of the empty \\c value string:\n *\n * <code><input type=\"submit\" value=\"\" data-locale=\"key\"/></code>\n *\n * @return An object containing the resource bundle information.\n */\nCSInterface.prototype.initResourceBundle = function () {\n    var resourceBundle = JSON.parse(window.__adobe_cep__.initResourceBundle());\n    var resElms = document.querySelectorAll('[data-locale]');\n    for (var n = 0; n < resElms.length; n++) {\n        var resEl = resElms[n];\n        // Get the resource key from the element.\n        var resKey = resEl.getAttribute('data-locale');\n        if (resKey) {\n            // Get all the resources that start with the key.\n            for (var key in resourceBundle) {\n                if (key.indexOf(resKey) === 0) {\n                    var resValue = resourceBundle[key];\n                    if (key.length == resKey.length) {\n                        resEl.innerHTML = resValue;\n                    }\n                    else if ('.' == key.charAt(resKey.length)) {\n                        var attrKey = key.substring(resKey.length + 1);\n                        resEl[attrKey] = resValue;\n                    }\n                }\n            }\n        }\n    }\n    return resourceBundle;\n};\n\n/**\n * Writes installation information to a file.\n *\n * @return The file path.\n */\nCSInterface.prototype.dumpInstallationInfo = function () {\n    return window.__adobe_cep__.dumpInstallationInfo();\n};\n\n/**\n * Retrieves version information for the current Operating System,\n * See http://www.useragentstring.com/pages/Chrome/ for Chrome \\c navigator.userAgent values.\n *\n * @return A string containing the OS version, or \"unknown Operation System\".\n * If user customizes the User Agent by setting CEF command parameter \"--user-agent\", only\n * \"Mac OS X\" or \"Windows\" will be returned. \n */\nCSInterface.prototype.getOSInformation = function () {\n    var userAgent = navigator.userAgent;\n\n    if ((navigator.platform == \"Win32\") || (navigator.platform == \"Windows\")) {\n        var winVersion = \"Windows\";\n        var winBit = \"\";\n        if (userAgent.indexOf(\"Windows\") > -1) {\n            if (userAgent.indexOf(\"Windows NT 5.0\") > -1) {\n                winVersion = \"Windows 2000\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 5.1\") > -1) {\n                winVersion = \"Windows XP\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 5.2\") > -1) {\n                winVersion = \"Windows Server 2003\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 6.0\") > -1) {\n                winVersion = \"Windows Vista\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 6.1\") > -1) {\n                winVersion = \"Windows 7\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 6.2\") > -1) {\n                winVersion = \"Windows 8\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 6.3\") > -1) {\n                winVersion = \"Windows 8.1\";\n            }\n            else if (userAgent.indexOf(\"Windows NT 10\") > -1) {\n                winVersion = \"Windows 10\";\n            }\n\n            if (userAgent.indexOf(\"WOW64\") > -1 || userAgent.indexOf(\"Win64\") > -1) {\n                winBit = \" 64-bit\";\n            }\n            else {\n                winBit = \" 32-bit\";\n            }\n        }\n\n        return winVersion + winBit;\n    }\n    else if ((navigator.platform == \"MacIntel\") || (navigator.platform == \"Macintosh\")) {\n        var result = \"Mac OS X\";\n\n        if (userAgent.indexOf(\"Mac OS X\") > -1) {\n            result = userAgent.substring(userAgent.indexOf(\"Mac OS X\"), userAgent.indexOf(\")\"));\n            result = result.replace(/_/g, \".\");\n        }\n\n        return result;\n    }\n\n    return \"Unknown Operation System\";\n};\n\n/**\n * Opens a page in the default system browser.\n *\n * Since 4.2.0\n *\n * @param url  The URL of the page/file to open, or the email address.\n * Must use HTTP/HTTPS/file/mailto protocol. For example:\n *   \"http://www.adobe.com\"\n *   \"https://github.com\"\n *   \"file:///C:/log.txt\"\n *   \"mailto:test@adobe.com\"\n *\n * @return One of these error codes:\\n\n *      <ul>\\n\n *          <li>NO_ERROR - 0</li>\\n\n *          <li>ERR_UNKNOWN - 1</li>\\n\n *          <li>ERR_INVALID_PARAMS - 2</li>\\n\n *          <li>ERR_INVALID_URL - 201</li>\\n\n *      </ul>\\n\n */\nCSInterface.prototype.openURLInDefaultBrowser = function (url) {\n    return cep.util.openURLInDefaultBrowser(url);\n};\n\n/**\n * Retrieves extension ID.\n *\n * Since 4.2.0\n *\n * @return extension ID.\n */\nCSInterface.prototype.getExtensionID = function () {\n    return window.__adobe_cep__.getExtensionId();\n};\n\n/**\n * Retrieves the scale factor of screen. \n * On Windows platform, the value of scale factor might be different from operating system's scale factor,\n * since host application may use its self-defined scale factor.\n *\n * Since 4.2.0\n *\n * @return One of the following float number.\n *      <ul>\\n\n *          <li> -1.0 when error occurs </li>\\n\n *          <li> 1.0 means normal screen </li>\\n\n *          <li> >1.0 means HiDPI screen </li>\\n\n *      </ul>\\n\n */\nCSInterface.prototype.getScaleFactor = function () {\n    return window.__adobe_cep__.getScaleFactor();\n};\n\n/**\n * Set a handler to detect any changes of scale factor. This only works on Mac.\n *\n * Since 4.2.0\n *\n * @param handler   The function to be called when scale factor is changed.\n *\n */\nCSInterface.prototype.setScaleFactorChangedHandler = function (handler) {\n    window.__adobe_cep__.setScaleFactorChangedHandler(handler);\n};\n\n/**\n * Retrieves current API version.\n *\n * Since 4.2.0\n *\n * @return ApiVersion object.\n *\n */\nCSInterface.prototype.getCurrentApiVersion = function () {\n    var apiVersion = JSON.parse(window.__adobe_cep__.getCurrentApiVersion());\n    return apiVersion;\n};\n\n/**\n * Set panel flyout menu by an XML.\n *\n * Since 5.2.0\n *\n * Register a callback function for \"com.adobe.csxs.events.flyoutMenuClicked\" to get notified when a \n * menu item is clicked.\n * The \"data\" attribute of event is an object which contains \"menuId\" and \"menuName\" attributes. \n *\n * Register callback functions for \"com.adobe.csxs.events.flyoutMenuOpened\" and \"com.adobe.csxs.events.flyoutMenuClosed\"\n * respectively to get notified when flyout menu is opened or closed.\n *\n * @param menu     A XML string which describes menu structure.\n * An example menu XML:\n * <Menu>\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checked=\"false\"/>\n *   <MenuItem Label=\"TestExample2\">\n *     <MenuItem Label=\"TestExample2-1\" >\n *       <MenuItem Label=\"TestExample2-1-1\" Enabled=\"false\" Checked=\"true\"/>\n *     </MenuItem>\n *     <MenuItem Label=\"TestExample2-2\" Enabled=\"true\" Checked=\"true\"/>\n *   </MenuItem>\n *   <MenuItem Label=\"---\" />\n *   <MenuItem Label=\"TestExample3\" Enabled=\"false\" Checked=\"false\"/>\n * </Menu>\n *\n */\nCSInterface.prototype.setPanelFlyoutMenu = function (menu) {\n    if (\"string\" != typeof menu) {\n        return;\n    }\n\n    window.__adobe_cep__.invokeSync(\"setPanelFlyoutMenu\", menu);\n};\n\n/**\n * Updates a menu item in the extension window's flyout menu, by setting the enabled\n * and selection status.\n *  \n * Since 5.2.0\n *\n * @param menuItemLabel\tThe menu item label. \n * @param enabled\t\tTrue to enable the item, false to disable it (gray it out).\n * @param checked\t\tTrue to select the item, false to deselect it.\n *\n * @return false when the host application does not support this functionality (HostCapabilities.EXTENDED_PANEL_MENU is false). \n *         Fails silently if menu label is invalid.\n *\n * @see HostCapabilities.EXTENDED_PANEL_MENU\n */\nCSInterface.prototype.updatePanelMenuItem = function (menuItemLabel, enabled, checked) {\n    var ret = false;\n    if (this.getHostCapabilities().EXTENDED_PANEL_MENU) {\n        var itemStatus = new MenuItemStatus(menuItemLabel, enabled, checked);\n        ret = window.__adobe_cep__.invokeSync(\"updatePanelMenuItem\", JSON.stringify(itemStatus));\n    }\n    return ret;\n};\n\n\n/**\n * Set context menu by XML string.\n *\n * Since 5.2.0\n *\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\n * - an item without menu ID or menu name is disabled and is not shown.\n * - if the item name is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\n * - Checkable attribute takes precedence over Checked attribute.\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item. \n     The Chrome extension contextMenus API was taken as a reference. \n     https://developer.chrome.com/extensions/contextMenus\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\n *\n * @param menu      A XML string which describes menu structure.\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\n *\n * @description An example menu XML:\n * <Menu>\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checkable=\"true\" Checked=\"false\" Icon=\"./image/small_16X16.png\"/>\n *   <MenuItem Id=\"menuItemId2\" Label=\"TestExample2\">\n *     <MenuItem Id=\"menuItemId2-1\" Label=\"TestExample2-1\" >\n *       <MenuItem Id=\"menuItemId2-1-1\" Label=\"TestExample2-1-1\" Enabled=\"false\" Checkable=\"true\" Checked=\"true\"/>\n *     </MenuItem>\n *     <MenuItem Id=\"menuItemId2-2\" Label=\"TestExample2-2\" Enabled=\"true\" Checkable=\"true\" Checked=\"true\"/>\n *   </MenuItem>\n *   <MenuItem Label=\"---\" />\n *   <MenuItem Id=\"menuItemId3\" Label=\"TestExample3\" Enabled=\"false\" Checkable=\"true\" Checked=\"false\"/>\n * </Menu>\n */\nCSInterface.prototype.setContextMenu = function (menu, callback) {\n    if (\"string\" != typeof menu) {\n        return;\n    }\n\n    window.__adobe_cep__.invokeAsync(\"setContextMenu\", menu, callback);\n};\n\n/**\n * Set context menu by JSON string.\n *\n * Since 6.0.0\n *\n * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\n * - an item without menu ID or menu name is disabled and is not shown.\n * - if the item label is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\n * - Checkable attribute takes precedence over Checked attribute.\n * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item. \n     The Chrome extension contextMenus API was taken as a reference.\n * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\n     https://developer.chrome.com/extensions/contextMenus\n *\n * @param menu      A JSON string which describes menu structure.\n * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\n *\n * @description An example menu JSON:\n *\n * { \n *      \"menu\": [\n *          {\n *              \"id\": \"menuItemId1\",\n *              \"label\": \"testExample1\",\n *              \"enabled\": true,\n *              \"checkable\": true,\n *              \"checked\": false,\n *              \"icon\": \"./image/small_16X16.png\"\n *          },\n *          {\n *              \"id\": \"menuItemId2\",\n *              \"label\": \"testExample2\",\n *              \"menu\": [\n *                  {\n *                      \"id\": \"menuItemId2-1\",\n *                      \"label\": \"testExample2-1\",\n *                      \"menu\": [\n *                          {\n *                              \"id\": \"menuItemId2-1-1\",\n *                              \"label\": \"testExample2-1-1\",\n *                              \"enabled\": false,\n *                              \"checkable\": true,\n *                              \"checked\": true\n *                          }\n *                      ]\n *                  },\n *                  {\n *                      \"id\": \"menuItemId2-2\",\n *                      \"label\": \"testExample2-2\",\n *                      \"enabled\": true,\n *                      \"checkable\": true,\n *                      \"checked\": true\n *                  }\n *              ]\n *          },\n *          {\n *              \"label\": \"---\"\n *          },\n *          {\n *              \"id\": \"menuItemId3\",\n *              \"label\": \"testExample3\",\n *              \"enabled\": false,\n *              \"checkable\": true,\n *              \"checked\": false\n *          }\n *      ]\n *  }\n *\n */\nCSInterface.prototype.setContextMenuByJSON = function (menu, callback) {\n    if (\"string\" != typeof menu) {\n        return;\n    }\n\n    window.__adobe_cep__.invokeAsync(\"setContextMenuByJSON\", menu, callback);\n};\n\n/**\n * Updates a context menu item by setting the enabled and selection status.\n *  \n * Since 5.2.0\n *\n * @param menuItemID\tThe menu item ID. \n * @param enabled\t\tTrue to enable the item, false to disable it (gray it out).\n * @param checked\t\tTrue to select the item, false to deselect it.\n */\nCSInterface.prototype.updateContextMenuItem = function (menuItemID, enabled, checked) {\n    var itemStatus = new ContextMenuItemStatus(menuItemID, enabled, checked);\n    ret = window.__adobe_cep__.invokeSync(\"updateContextMenuItem\", JSON.stringify(itemStatus));\n};\n\n/**\n * Get the visibility status of an extension window. \n *  \n * Since 6.0.0\n *\n * @return true if the extension window is visible; false if the extension window is hidden.\n */\nCSInterface.prototype.isWindowVisible = function () {\n    return window.__adobe_cep__.invokeSync(\"isWindowVisible\", \"\");\n};\n\n/**\n * Resize extension's content to the specified dimensions.\n * 1. Works with modal and modeless extensions in all Adobe products.\n * 2. Extension's manifest min/max size constraints apply and take precedence. \n * 3. For panel extensions\n *    3.1 This works in all Adobe products except:\n *        * Premiere Pro\n *        * Prelude\n *        * After Effects\n *    3.2 When the panel is in certain states (especially when being docked),\n *        it will not change to the desired dimensions even when the\n *        specified size satisfies min/max constraints.\n *\n * Since 6.0.0\n *\n * @param width  The new width\n * @param height The new height\n */\nCSInterface.prototype.resizeContent = function (width, height) {\n    window.__adobe_cep__.resizeContent(width, height);\n};\n\n/**\n * Register the invalid certificate callback for an extension. \n * This callback will be triggered when the extension tries to access the web site that contains the invalid certificate on the main frame.\n * But if the extension does not call this function and tries to access the web site containing the invalid certificate, a default error page will be shown.\n *  \n * Since 6.1.0\n *\n * @param callback the callback function\n */\nCSInterface.prototype.registerInvalidCertificateCallback = function (callback) {\n    return window.__adobe_cep__.registerInvalidCertificateCallback(callback);\n};\n\n/**\n * Register an interest in some key events to prevent them from being sent to the host application.\n *\n * This function works with modeless extensions and panel extensions. \n * Generally all the key events will be sent to the host application for these two extensions if the current focused element\n * is not text input or dropdown,\n * If you want to intercept some key events and want them to be handled in the extension, please call this function\n * in advance to prevent them being sent to the host application.\n *\n * Since 6.1.0\n *\n * @param keyEventsInterest      A JSON string describing those key events you are interested in. A null object or\n                                 an empty string will lead to removing the interest\n *\n * This JSON string should be an array, each object has following keys:\n *\n * keyCode:  [Required] represents an OS system dependent virtual key code identifying\n *           the unmodified value of the pressed key.\n * ctrlKey:  [optional] a Boolean that indicates if the control key was pressed (true) or not (false) when the event occurred.\n * altKey:   [optional] a Boolean that indicates if the alt key was pressed (true) or not (false) when the event occurred.\n * shiftKey: [optional] a Boolean that indicates if the shift key was pressed (true) or not (false) when the event occurred.\n * metaKey:  [optional] (Mac Only) a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred.\n *                      On Macintosh keyboards, this is the command key. To detect Windows key on Windows, please use keyCode instead.\n * An example JSON string:\n *\n * [\n *     {\n *         \"keyCode\": 48\n *     },\n *     {\n *         \"keyCode\": 123,\n *         \"ctrlKey\": true\n *     },\n *     {\n *         \"keyCode\": 123,\n *         \"ctrlKey\": true,\n *         \"metaKey\": true\n *     }\n * ]\n *\n */\nCSInterface.prototype.registerKeyEventsInterest = function (keyEventsInterest) {\n    return window.__adobe_cep__.registerKeyEventsInterest(keyEventsInterest);\n};\n\n/**\n * Set the title of the extension window. \n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\n *\n * Since 6.1.0\n *\n * @param title The window title.\n */\nCSInterface.prototype.setWindowTitle = function (title) {\n    window.__adobe_cep__.invokeSync(\"setWindowTitle\", title);\n};\n\n/**\n * Get the title of the extension window. \n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\n *\n * Since 6.1.0\n *\n * @return The window title.\n */\nCSInterface.prototype.getWindowTitle = function () {\n    return window.__adobe_cep__.invokeSync(\"getWindowTitle\", \"\");\n};"],"names":["CSXSWindowType","SystemPath","ColorType","MenuItemStatus","menuItemLabel","enabled","checked","ContextMenuItemStatus","menuItemID","CSInterface","_PANEL","_MODELESS","_MODAL_DIALOG","EvalScript_ErrMessage","CSEvent","type","scope","appId","extensionId","prototype","data","USER_DATA","COMMON_FILES","MY_DOCUMENTS","APPLICATION","EXTENSION","HOST_APPLICATION","RGB","GRADIENT","NONE","THEME_COLOR_CHANGED_EVENT","hostEnvironment","window","__adobe_cep__","JSON","parse","getHostEnvironment","closeExtension","getSystemPath","pathType","path","decodeURI","OSVersion","getOSInformation","indexOf","replace","evalScript","script","callback","result","getApplicationID","getHostCapabilities","dispatchEvent","event","stringify","addEventListener","listener","obj","removeEventListener","requestOpenExtension","params","getExtensions","extensionIds","extensionIdsStr","getNetworkPreferences","initResourceBundle","resourceBundle","resElms","document","querySelectorAll","n","length","resEl","resKey","getAttribute","key","resValue","innerHTML","charAt","substring","dumpInstallationInfo","userAgent","navigator","platform","winVersion","winBit","openURLInDefaultBrowser","url","cep","util","getExtensionID","getExtensionId","getScaleFactor","setScaleFactorChangedHandler","handler","getCurrentApiVersion","setPanelFlyoutMenu","menu","invokeSync","updatePanelMenuItem","ret1","EXTENDED_PANEL_MENU","itemStatus","setContextMenu","invokeAsync","setContextMenuByJSON","updateContextMenuItem","ret","isWindowVisible","resizeContent","width","height","registerInvalidCertificateCallback","registerKeyEventsInterest","keyEventsInterest","setWindowTitle","title","getWindowTitle"],"version":3,"file":"index.3aee32b3.js.map"}