const e=document.querySelector("#sourceTrack").value,t=(e,t,n="file")=>{try{let o=new CSInterface;showLoadingScreen(!0),setLoadingCaption("Initiating...");let i=[];if(t.forEach((e,n)=>{null!=e.value&&i.push(e.value),setLoadingCaption(`Fetching effect exclusion ${n}/${t.length}}`)}),console.log(e),console.log(t),console.log(i),!e)throw"TargetTrack is undefined";if(!i)throw"Effect exclusions are undefined.";if("file"===n){let t=`$._PPP_.saveEffectstoFile(${e}, ${JSON.stringify(i)})`;setLoadingCaption("Saving effects to file..."),o.evalScript(t,handleCallback)}else{let t=`$._PPP_.copyClipEffectsToAdjustmentLayers(${e}, ${JSON.stringify(i)})`;setLoadingCaption("Extracting effects to timeline..."),o.evalScript(t,handleCallback)}}catch(e){throw Error(e)}},n=document.querySelector("#extract-btn");new CSInterface,n.addEventListener("click",n=>{n.preventDefault(),t(e,document.querySelectorAll(".exclusion-dropdown"),document.querySelector(".switch-option.active").getAttribute("data-destination"))}),document.querySelectorAll(".debug").forEach(e=>{debug?e.classList.remove("hide"):e.classList.add("hide")});
//# sourceMappingURL=index.a89d8cc6.js.map
