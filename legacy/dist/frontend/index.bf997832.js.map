{"mappings":"","sources":["src/frontend/lib/ext.ts"],"sourcesContent":["/*************************************************************************\n* ADOBE CONFIDENTIAL\n* ___________________\n*\n* Copyright 2014 Adobe Inc.\n* All Rights Reserved.\n*\n* NOTICE: Adobe permits you to use, modify, and distribute this file in\n* accordance with the terms of the Adobe license agreement accompanying\n* it. If you have received this file from a source other than Adobe,\n* then your use, modification, or distribution of it requires the prior\n* written permission of Adobe. \n**************************************************************************/\n\nfunction onLoaded() {\n\tvar csInterface = new CSInterface();\n\tvar appName = csInterface.hostEnvironment.appName;\n\tdocument.getElementById(\"dragthing\").style.backgroundColor = \"lightblue\";\n\tvar caps = csInterface.getHostCapabilities();\n\tif(appName != \"FLPR\"){\n\t\tloadJSX();\n\t}\n\n\tvar appNames = [\"PPRO\"];\n\n\tfor (var i = 0; i < appNames.length; i++) {\n\t\tvar name = appNames[i];\n\t\tif (appName.indexOf(name) >= 0) {\n\t\t\tvar btn = document.getElementById(\"btn_\" + name);\n\t\t\tif (btn){\n\t\t\t\tbtn.disabled = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateThemeWithAppSkinInfo(csInterface.hostEnvironment.appSkinInfo);\n\n\t// Update the color of the panel when the theme color of the product changed.\n\tcsInterface.addEventListener(CSInterface.THEME_COLOR_CHANGED_EVENT, onAppThemeColorChanged);\n\t// Listen for event sent in response to rendering a sequence.\n\tcsInterface.addEventListener(\"com.adobe.csxs.events.PProPanelRenderEvent\", function(event){\n\t\talert(event.data);\n\t});\n\n\tcsInterface.addEventListener(\"com.adobe.csxs.events.WorkspaceChanged\", function(event){\n\t\talert(\"New workspace selected: \" + event.data);\n\t});\n\n\n\t// register for messages\n\tVulcanInterface.addMessageListener(\n\t    VulcanMessage.TYPE_PREFIX + \"com.DVA.message.sendtext\",\n\t    function(message) {\n\t        var str = VulcanInterface.getPayload(message);\n\t        // You just received the text of every Text layer in the current AE comp.\n\t    }\n\t);\n\tcsInterface.evalScript('$._PPP_.getVersionInfo()', myVersionInfoFunction);\t\n\tcsInterface.evalScript('$._PPP_.getActiveSequenceName()', myCallBackFunction);\t\t\n\tcsInterface.evalScript('$._PPP_.getUserName()', myUserNameFunction);  \n\tcsInterface.evalScript('$._PPP_.getSequenceProxySetting()', myGetProxyFunction);\n\tcsInterface.evalScript('$._PPP_.keepPanelLoaded()');\n\tcsInterface.evalScript('$._PPP_.disableImportWorkspaceWithProjects()');\n}\n\nfunction dragHandler(event){\n\tvar csInterface = new CSInterface();\n\tvar extPath \t= csInterface.getSystemPath(SystemPath.EXTENSION);\n\tvar OSVersion\t= csInterface.getOSInformation();\n\t\n\tif (extPath != null){\n\t\textPath = extPath + '/payloads/test.jpg';\n\t\tif (OSVersion.indexOf(\"Windows\") >=0){\n\t\t\tvar sep = '\\\\\\\\';\n\t\t\textPath = extPath.replace(/\\//g, sep);\n\t\t}\n\t\tevent.dataTransfer.setData(\"com.adobe.cep.dnd.file.0\", extPath);\n\t//\tevent.dataTransfer.setData(\"com.adobe.cep.dnd.file.N\", path);  N = (items to import - 1)\n\t}\n}\n\nfunction myCallBackFunction (data) {\n\t// Updates seq_display with whatever ExtendScript function returns.\n\tvar boilerPlate\t\t= \"Active Sequence: \";\n\tvar seq_display\t\t= document.getElementById(\"active_seq\");\n\tseq_display.innerHTML\t= boilerPlate + data;\n}\n\nfunction myUserNameFunction (data) {\n\t// Updates username with whatever ExtendScript function returns.\n\tvar user_name\t\t\t= document.getElementById(\"username\");\n\tuser_name.innerHTML\t\t= data;\n}\n\nfunction myGetProxyFunction (data) {\n\t// Updates proxy_display based on current sequence's value.\n\tvar boilerPlate\t\t   = \"Proxies enabled for sequence: \";\n\tvar proxy_display\t   = document.getElementById(\"proxies_on\");\n\n\tif (proxy_display !== null) {\n\t\tproxy_display.innerHTML = boilerPlate + data;\n\t}\n}\n\nfunction mySetProxyFunction (data) {\n\tvar csInterface = new CSInterface();\n\tcsInterface.evalScript('$._PPP_.getActiveSequenceName()', myCallBackFunction);\n\tcsInterface.evalScript('$._PPP_.getSequenceProxySetting()', myGetProxyFunction);\n}\n\t \nfunction myVersionInfoFunction (data) {\n\tvar boilerPlate\t\t= \"PPro Version: \";\n\tvar v_string\t\t= document.getElementById(\"version_string\");\n\tv_string.innerHTML\t= boilerPlate + data;\n}\n\n/**\n * Update the theme with the AppSkinInfo retrieved from the host product.\n */\n\nfunction updateThemeWithAppSkinInfo(appSkinInfo) {\n\n\t//Update the background color of the panel\n\n\tvar panelBackgroundColor = appSkinInfo.panelBackgroundColor.color;\n\tdocument.body.bgColor = toHex(panelBackgroundColor);\n\n\tvar styleId \t\t\t= \"ppstyle\";\n\tvar gradientBg\t\t\t= \"background-image: -webkit-linear-gradient(top, \" + toHex(panelBackgroundColor, 40) + \" , \" + toHex(panelBackgroundColor, 10) + \");\";\n\tvar gradientDisabledBg\t= \"background-image: -webkit-linear-gradient(top, \" + toHex(panelBackgroundColor, 15) + \" , \" + toHex(panelBackgroundColor, 5) + \");\";\n\tvar boxShadow\t\t\t= \"-webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.4), 0 1px 1px rgba(0, 0, 0, 0.2);\";\n\tvar boxActiveShadow\t\t= \"-webkit-box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.6);\";\n\t\t \n\tvar isPanelThemeLight\t= panelBackgroundColor.red > 50; // choose your own sweet spot\n\t\t \n\t\tvar fontColor, disabledFontColor;\n\t\tvar borderColor;\n\t\tvar inputBackgroundColor;\n\t\tvar gradientHighlightBg;\n\n\t\tif(isPanelThemeLight) {\n\t\t\tfontColor\t\t\t\t= \"#000000;\";\n\t\t\tdisabledFontColor\t\t= \"color:\" + toHex(panelBackgroundColor, -70) + \";\";\n\t\t\tborderColor\t\t\t\t= \"border-color: \" + toHex(panelBackgroundColor, -90) + \";\";\n\t\t\tinputBackgroundColor\t= toHex(panelBackgroundColor, 54) + \";\";\n\t\t\tgradientHighlightBg\t\t= \"background-image: -webkit-linear-gradient(top, \" + toHex(panelBackgroundColor, -40) + \" , \" + toHex(panelBackgroundColor,-50) + \");\";\n\t\t} else {\n\t\t\tfontColor\t\t\t\t= \"#ffffff;\";\n\t\t\tdisabledFontColor\t\t= \"color:\" + toHex(panelBackgroundColor, 100) + \";\";\n\t\t\tborderColor\t\t\t\t= \"border-color: \" + toHex(panelBackgroundColor, -45) + \";\";\n\t\t\tinputBackgroundColor\t= toHex(panelBackgroundColor, -20) + \";\";\n\t\t\tgradientHighlightBg\t\t= \"background-image: -webkit-linear-gradient(top, \" + toHex(panelBackgroundColor, -20) + \" , \" + toHex(panelBackgroundColor, -30) + \");\";\n\t\t}\n\t\n\t\t//Update the default text style with pp values\n\n\t\taddRule(styleId, \".default\", \"font-size:\" + appSkinInfo.baseFontSize + \"px\" + \"; color:\" + fontColor + \"; background-color:\" + toHex(panelBackgroundColor) + \";\");\n\t\taddRule(styleId, \"button, select, input[type=text], input[type=button], input[type=submit]\", borderColor);\t   \n\t\taddRule(styleId, \"p\", \"color:\" + fontColor + \";\");\t  \n\t\taddRule(styleId, \"button\", \"font-family: \" + appSkinInfo.baseFontFamily + \", Arial, sans-serif;\");\t  \n\t\taddRule(styleId, \"button\", \"color:\" + fontColor + \";\");\t   \n\t\taddRule(styleId, \"button\", \"font-size:\" + (1.2 * appSkinInfo.baseFontSize) + \"px;\");\t\n\t\taddRule(styleId, \"button, select, input[type=button], input[type=submit]\", gradientBg);\t\n\t\taddRule(styleId, \"button, select, input[type=button], input[type=submit]\", boxShadow);\n\t\taddRule(styleId, \"button:enabled:active, input[type=button]:enabled:active, input[type=submit]:enabled:active\", gradientHighlightBg);\n\t\taddRule(styleId, \"button:enabled:active, input[type=button]:enabled:active, input[type=submit]:enabled:active\", boxActiveShadow);\n\t\taddRule(styleId, \"[disabled]\", gradientDisabledBg);\n\t\taddRule(styleId, \"[disabled]\", disabledFontColor);\n\t\taddRule(styleId, \"input[type=text]\", \"padding:1px 3px;\");\n\t\taddRule(styleId, \"input[type=text]\", \"background-color: \" + inputBackgroundColor + \";\");\n\t\taddRule(styleId, \"input[type=text]:focus\", \"background-color: #ffffff;\");\n\t\taddRule(styleId, \"input[type=text]:focus\", \"color: #000000;\");\n}\n\nfunction addRule(stylesheetId, selector, rule) {\n\tvar stylesheet = document.getElementById(stylesheetId);\n\t\n\tif (stylesheet) {\n\t\tstylesheet = stylesheet.sheet;\n\t\tif( stylesheet.addRule ){\n\t\t\t\tstylesheet.addRule(selector, rule);\n\t\t} else if( stylesheet.insertRule ){\n\t\t\tstylesheet.insertRule(selector + ' { ' + rule + ' }', stylesheet.cssRules.length);\n\t\t}\n\t}\n}\n\nfunction reverseColor(color, delta) {\n\treturn toHex({red:Math.abs(255-color.red), green:Math.abs(255-color.green), blue:Math.abs(255-color.blue)}, delta);\n}\n\n/**\n * Convert the Color object to string in hexadecimal format;\n */\n\nfunction toHex(color, delta) {\n\tfunction computeValue(value, delta) {\n\t\tvar computedValue = !isNaN(delta) ? value + delta : value;\n\t\tif (computedValue < 0) {\n\t\t\tcomputedValue = 0;\n\t\t} else if (computedValue > 255) {\n\t\t\tcomputedValue = 255;\n\t\t}\n\n\t\tcomputedValue = Math.round(computedValue).toString(16);\n\t\treturn computedValue.length == 1 ? \"0\" + computedValue : computedValue;\n\t}\n\n\tvar hex = \"\";\n\tif (color) {\n\t\thex = computeValue(color.red, delta) + computeValue(color.green, delta) + computeValue(color.blue, delta);\n\t}\n\treturn \"#\" + hex;\n}\n\nfunction onAppThemeColorChanged(event) {\n\t// Should get a latest HostEnvironment object from application.\n\tvar skinInfo = JSON.parse(window.__adobe_cep__.getHostEnvironment()).appSkinInfo;\n\t// Gets the style information such as color info from the skinInfo, \n\t// and redraw all UI controls of your extension according to the style info.\n\tupdateThemeWithAppSkinInfo(skinInfo);\n} \n\n/**\n* Load JSX file into the scripting context of the product. All the jsx files in \n* folder [ExtensionRoot]/jsx will be loaded. \n*/\nfunction loadJSX() {\n\tvar csInterface = new CSInterface();\n\tvar extensionRoot = csInterface.getSystemPath(SystemPath.EXTENSION) + \"/dom_app/dist/\";\n\tcsInterface.evalScript('$._ext.evalFiles(\"' + extensionRoot + '\")');\n}\n\nfunction evalScript(script, callback) {\n\tnew CSInterface().evalScript(script, callback);\n}\n\nfunction onClickButton(ppid) {\n\tvar extScript = \"$._ext_\" + ppid + \".run()\";\n\tevalScript(extScript);\n}\n"],"names":[],"version":3,"file":"index.bf997832.js.map"}