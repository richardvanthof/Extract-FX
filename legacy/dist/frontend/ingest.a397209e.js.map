{"mappings":"ACAA,MAAM,EAAkB,SAAS,aAAa,CAAC,gBAEzC,EAA8B,AAAC,IACnC,IAAI,EAAgB,EAAE,CACtB,IAAI,IAAI,KAAU,EACd,IAAI,IAAI,KAAW,EACX,EAAc,QAAQ,CAAC,IAAW,EAAc,IAAI,CAAC,GAGjE,OAAO,CACT,EAaA,IAAI,EAAgC,KAChC,EAAoC,KAGxC,MAAM,EAAmB,AAAC,IACxB,IAAM,EAAS,IAAI,UAEnB,CAAA,EAAO,MAAM,CAAG,AAAC,IACb,GAAI,CAIA,GAFA,EAAa,KAAK,KAAK,CAAC,EAAE,MAAM,CAAC,MAAM,GAWnC,GAPI,MAAM,OAAO,CAAC,EAAW,KAAK,EAC9B,EAAmB,EAA4B,EAAW,KAAK,EAE/D,QAAQ,IAAI,CAAC,gDAIb,MAAM,OAAO,CAAC,EAAW,UAAU,EAAG,CACxC,IAAM,EAAa,EAAW,UAAU,CACxC,oBAAoB,GACpB,sBACA,EAAW,OAAO,CAAC,AAAC,IAClB,QAAQ,GAAG,CAAC,GACZ,aAAa,EAAkB,EACjC,EACJ,MACI,QAAQ,IAAI,CAAC,qDAKnB,QAAQ,GAAG,CAAC,EAAY,EAAW,UAAU,CAAE,EAEnD,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,2BAA4B,EAC9C,CACJ,EAGA,EAAO,UAAU,CAAC,EACpB,EAEM,EAAwB,CAC5B,EACA,EACA,KAEA,GAAI,CACF,IAAM,EAAc,IAAI,YACxB,kBAAkB,CAAA,GAClB,kBAAkB,iBAGlB,IAAI,EAA4B,EAAE,CAYjC,GAXD,EAAsB,OAAO,CAAC,CAAC,EAAI,KAClB,MAAZ,EAAG,KAAK,EACT,EAAiB,IAAI,CAAC,EAAG,KAAK,EAEhC,kBAAkB,CAAC,0BAA0B,EAAE,EAAM,CAAC,EAAE,EAAsB,MAAM,CAAC,CAAC,CAAC,CACzF,GAEC,QAAQ,GAAG,CAAC,GACZ,QAAQ,GAAG,CAAC,GACZ,QAAQ,GAAG,CAAC,GAET,CAAC,EAAa,KAAM,2BACvB,GAAG,CAAC,EAAkB,KAAM,mCAE5B,IAAM,EAAU,KAAK,SAAS,CAAC,CAC9B,WAAY,EACZ,WAAY,EACZ,YAAa,CACd,GAEA,QAAQ,GAAG,CAAC,GAEZ,IAAM,EAAS,CAAC,+BAA+B,EAAE,EAAQ,EAAE,CAAC,CAC5D,kBAAkB,6BAElB,EAAY,UAAU,CAAC,EAAQ,eAElC,CAAE,MAAO,EAAK,CACZ,MAAM,AAAI,MAAM,EAClB,CACF,EAIM,EAAkB,SAAS,aAAa,CAAC,gBACzC,EAAa,SAAS,aAAa,CAAC,eAE1C,EAAgB,gBAAgB,CAAC,SAAU,AAAC,IAC1C,QAAQ,GAAG,CAAC,iBAEZ,IAAM,EAAO,AADE,EAAE,MAAM,CACH,KAAK,CAAC,EAAE,CACxB,EACA,EAAiB,GAEjB,QAAQ,IAAI,CAAC,oBAEnB,GAEA,EAAW,gBAAgB,CAAC,QAAS,AAAA,IACnC,EAAE,cAAc,GAChB,IAAM,EAAwB,SAAS,gBAAgB,CAAC,uBAClD,EAAqB,SAAS,aAAa,CAAC,iBAAiB,KAAK,CACrE,EACD,EAAsB,EAAY,EAAa,GAE/C,MAAM,+BAGV","sources":["<anon>","src/frontend/scripts/handleIngest.ts"],"sourcesContent":["const sourceFileInput = document.querySelector('#source-file');\nconst getUniqueKeysFromObjectList = (objects)=>{\n    let uniqueStrings = [];\n    for (let object of objects){\n        for(let keyName in object)if (!uniqueStrings.includes(keyName)) uniqueStrings.push(keyName);\n    }\n    return uniqueStrings;\n};\n// Ensure necessary variables are defined\nlet sourceData = null;\nlet exclusionOptions = null;\n// Function to handle source data from the file\nconst handleSourceData = (file)=>{\n    const reader = new FileReader();\n    reader.onload = (e)=>{\n        try {\n            // Parse the file content as JSON and ensure proper typing\n            sourceData = JSON.parse(e.target.result);\n            if (sourceData) {\n                // Safely access `clips` to avoid errors if `clips` is undefined\n                if (Array.isArray(sourceData.clips)) exclusionOptions = getUniqueKeysFromObjectList(sourceData.clips);\n                else console.warn(\"No valid 'clips' array found in source data.\");\n                // Safely handle exclusions if they exist\n                if (Array.isArray(sourceData.exclusions)) {\n                    const exclusions = sourceData.exclusions;\n                    setExclusionOptions(exclusionOptions);\n                    removeAllExclusions();\n                    exclusions.forEach((exclusion)=>{\n                        console.log(exclusion);\n                        addExclusion(exclusionOptions, exclusion);\n                    });\n                } else console.warn(\"No valid 'exclusions' array found in source data.\");\n            }\n            // Log the parsed source data for verification\n            console.log(sourceData, sourceData.exclusions, exclusionOptions);\n        } catch (error) {\n            console.error(\"Error parsing JSON file:\", error);\n        }\n    };\n    // Read the file content as text\n    reader.readAsText(file);\n};\nconst handleEffectIngestion = (data, targetTrack, effectExclusionsElems)=>{\n    try {\n        const csInterface = new CSInterface();\n        showLoadingScreen(true);\n        setLoadingCaption('Initiating...');\n        // Get effect exclusions\n        let effectExclusions = [];\n        effectExclusionsElems.forEach((fx, index)=>{\n            if (fx.value != null) effectExclusions.push(fx.value);\n            setLoadingCaption(`Fetching effect exclusion ${index}/${effectExclusionsElems.length}}`);\n        });\n        console.log(targetTrack);\n        console.log(effectExclusionsElems);\n        console.log(effectExclusions);\n        if (!targetTrack) throw 'TargetTrack is undefined';\n        if (!effectExclusions) throw 'Effect exclusions are undefined.';\n        const options = JSON.stringify({\n            exclusions: effectExclusions,\n            sourceData: data,\n            targetTrack: targetTrack\n        });\n        console.log(options);\n        const script = `$._PPP_.restoreEffectsToClips('${options}')`;\n        setLoadingCaption('Restoring clip effects...');\n        csInterface.evalScript(script, handleCallback);\n    } catch (err) {\n        throw new Error(err);\n    }\n};\n// Add an event listener to the file input for handling file changes\nconst sourceFileInput = document.querySelector(\"#source-file\");\nconst ingestFile = document.querySelector('#ingest-btn');\nsourceFileInput.addEventListener(\"change\", (e)=>{\n    console.log('file changed.');\n    const target = e.target;\n    const file = target.files[0];\n    if (file) handleSourceData(file);\n    else console.warn(\"No file selected.\");\n});\ningestFile.addEventListener(\"click\", (e)=>{\n    e.preventDefault();\n    const effectExclusionsElems = document.querySelectorAll('.exclusion-dropdown');\n    const targetTrack = document.querySelector('#target-track').value;\n    if (sourceData) handleEffectIngestion(sourceData, targetTrack, effectExclusionsElems);\n    else alert('Please select a source file.');\n});\n\n//# sourceMappingURL=ingest.a397209e.js.map\n","const sourceFileInput = document.querySelector('#source-file');\n\nconst getUniqueKeysFromObjectList = (objects: Object[]):string[] => {\n  let uniqueStrings = [];\n  for(let object of objects) {\n      for(let keyName in object) {\n          if(!uniqueStrings.includes(keyName)) {uniqueStrings.push(keyName)}\n      }\n  }\n  return uniqueStrings\n};\n\n// Define types for your source data, clips, and exclusions\ninterface Clip {\n  [key: string]: any;  // Define based on the structure of your clip objects\n}\n\ninterface SourceData {\n  clips?: Clip[];\n  exclusions?: any[];  // Define the type of exclusions properly if known\n}\n\n// Ensure necessary variables are defined\nlet sourceData: SourceData | null = null;\nlet exclusionOptions: string[] | null = null;\n\n// Function to handle source data from the file\nconst handleSourceData = (file: File): void => {\n  const reader = new FileReader();\n\n  reader.onload = (e: ProgressEvent<FileReader>): void => {\n      try {\n          // Parse the file content as JSON and ensure proper typing\n          sourceData = JSON.parse(e.target.result as string) as SourceData;\n\n          if (sourceData) {\n              // Safely access `clips` to avoid errors if `clips` is undefined\n              if (Array.isArray(sourceData.clips)) {\n                  exclusionOptions = getUniqueKeysFromObjectList(sourceData.clips);\n              } else {\n                  console.warn(\"No valid 'clips' array found in source data.\");\n              }\n\n              // Safely handle exclusions if they exist\n              if (Array.isArray(sourceData.exclusions)) {\n                const exclusions = sourceData.exclusions;\n                setExclusionOptions(exclusionOptions);\n                removeAllExclusions();\n                exclusions.forEach((exclusion: any): void => {\n                  console.log(exclusion)\n                  addExclusion(exclusionOptions, exclusion);\n                });\n            } else {\n                console.warn(\"No valid 'exclusions' array found in source data.\");\n            }\n          }\n\n          // Log the parsed source data for verification\n          console.log(sourceData, sourceData.exclusions, exclusionOptions);\n\n      } catch (error) {\n          console.error(\"Error parsing JSON file:\", error);\n      }\n  };\n\n  // Read the file content as text\n  reader.readAsText(file);\n};\n\nconst handleEffectIngestion = (\n  data: SourceData,\n  targetTrack: number, \n  effectExclusionsElems:HTMLElement[]\n) => {\n  try {\n    const csInterface = new CSInterface();\n    showLoadingScreen(true)\n    setLoadingCaption('Initiating...')\n\n    // Get effect exclusions\n    let effectExclusions:string[] = [];\n    effectExclusionsElems.forEach((fx, index) => {\n      if(fx.value != null) {\n        effectExclusions.push(fx.value)\n      }\n      setLoadingCaption(`Fetching effect exclusion ${index}/${effectExclusionsElems.length}}`)\n    })\n\n     console.log(targetTrack)\n     console.log(effectExclusionsElems)\n     console.log(effectExclusions)\n     \n     if(!targetTrack) throw 'TargetTrack is undefined'\n     if(!effectExclusions) throw 'Effect exclusions are undefined.'\n     \n     const options = JSON.stringify({\n      exclusions: effectExclusions,\n      sourceData: data,\n      targetTrack: targetTrack\n     });\n\n     console.log(options)\n\n     const script = `$._PPP_.restoreEffectsToClips('${options}')`;\n     setLoadingCaption('Restoring clip effects...')\n     \n     csInterface.evalScript(script, handleCallback);\n\n  } catch (err) {\n    throw new Error(err)\n  }\n}\n\n\n// Add an event listener to the file input for handling file changes\nconst sourceFileInput = document.querySelector(\"#source-file\") as HTMLInputElement;\nconst ingestFile = document.querySelector('#ingest-btn');\n\nsourceFileInput.addEventListener(\"change\", (e: Event): void => {\n  console.log('file changed.')\n  const target = e.target as HTMLInputElement;\n  const file = target.files[0];\n  if (file) {\n      handleSourceData(file);\n  } else {\n      console.warn(\"No file selected.\");\n  }\n});\n\ningestFile.addEventListener(\"click\", e => {\n  e.preventDefault()\n  const effectExclusionsElems = document.querySelectorAll('.exclusion-dropdown');\n  const targetTrack:number = document.querySelector('#target-track').value;\n  if(sourceData) { \n    handleEffectIngestion(sourceData, targetTrack, effectExclusionsElems)\n  } else {\n    alert('Please select a source file.')\n  }\n  \n})\n\n\n\n"],"names":["sourceFileInput","document","querySelector","getUniqueKeysFromObjectList","objects","uniqueStrings","object","keyName","includes","push","sourceData","exclusionOptions","handleSourceData","file","reader","FileReader","onload","e","JSON","parse","target","result","Array","isArray","clips","console","warn","exclusions","setExclusionOptions","removeAllExclusions","forEach","exclusion","log","addExclusion","error","readAsText","handleEffectIngestion","data","targetTrack","effectExclusionsElems","csInterface","CSInterface","showLoadingScreen","setLoadingCaption","effectExclusions","fx","index","value","length","options","stringify","script","evalScript","handleCallback","err","Error","ingestFile","addEventListener","files","preventDefault","querySelectorAll","alert"],"version":3,"file":"ingest.a397209e.js.map"}